<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Dubbo网络通信-编解码]]></title>
    <url>%2F2018%2F10%2F06%2FDubbo%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E7%BC%96%E8%A7%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[Dubbo远程通讯协议头定义 1.为什么Dubbo要自己增加协议扩展？ —-为了解决TCP/IP粘包和拆包的问题。 所谓粘包和拆包，就是一个完整的业务数据可能会被TCP拆分成多个包进行发送，也有可能把多个小的包封装成一个大的数据包发送。 2.TCP为什么会出现粘包与拆包？ TCP是以流动的方式传输数据，传输的最小单位为一个报文段（segment）。Tcp Header中有个Options标识位，常见的标识为mss(Maximum Segment Size)指的是，连接层每次传输的数据有个最大限制MTU(Maximum Transmission Unit)，一般是1500比特，超过这个量要分成多个报文段，mss则是这个最大限制减去TCP的header，光是要传输的数据的大小，一般为1460比特。换算成字节，也就是180多字节。 TCP为提高性能，发送端会将需要发送的数据发送到缓冲区，等待缓冲区满了之后，再将缓冲中的数据发送到接收方。同理，接收方也有缓冲区这样的机制，来接收数据。 发生TCP粘包、拆包主要是由于下面一些原因： ①应用程序写入的数据大于套接字缓冲区大小，这将会发生拆包。 ②应用程序写入数据小于套接字缓冲区大小，网卡将应用多次写入的数据发送到网络上，这将会发生粘包。 ③进行mss（最大报文长度）大小的TCP分段，当TCP报文长度-TCP头部长度&gt;mss的时候将发生拆包。 ④接收方法不及时读取套接字缓冲区数据，这将发生粘包。 3.如何解决拆包粘包 既然知道了tcp是无界的数据流，且协议本身无法避免粘包，拆包的发生，那我们只能在应用层数据协议上，加以控制。通常在制定传输数据时，可以使用如下方法： 使用带消息头的协议、消息头存储消息开始标识及消息长度信息，服务端获取消息头的时候解析出消息长度，然后向后读取该长度的内容。 设置定长消息，服务端每次读取既定长度的内容作为一条完整消息。 设置消息边界，服务端从网络流中按消息编辑分离出消息内容，如在包尾增加回车或者空格等特殊字符作为分割，典型如FTP。 Consumer请求编码通过断点跟踪Consumer请求编码过程： 运行dubbo-demo-consumer工程，在dubbo-remoting-netty工程NettyCodecAdapter.java内部类InternalEncoder#encode()断点codec.encode(channel, buffer, msg);： 12345678910111213141516@Sharable private class InternalEncoder extends OneToOneEncoder &#123; @Override protected Object encode(ChannelHandlerContext ctx, Channel ch, Object msg) throws Exception &#123; com.alibaba.dubbo.remoting.buffer.ChannelBuffer buffer = com.alibaba.dubbo.remoting.buffer.ChannelBuffers.dynamicBuffer(1024); NettyChannel channel = NettyChannel.getOrAddChannel(ch, url, handler); try &#123; codec.encode(channel, buffer, msg); &#125; finally &#123; NettyChannel.removeChannelIfDisconnected(ch); &#125; return ChannelBuffers.wrappedBuffer(buffer.toByteBuffer()); &#125; &#125; 接下来跟踪调用层次： 1234567--&gt;NettyCodecAdapter.InternalEncoder.encode --&gt;DubboCountCodec.encode --&gt;ExchangeCodec.encode --&gt;ExchangeCodec.encodeRequest --&gt;ExchangeCodec.encodeRequestData --&gt;DubboCodec.encodeRequestData 通过默认的Hessian2ObjectOutput将RpcInvocation数据写入序列化buffer，最终由netty发送。 需要关注请求端编码过程： 1234567891011121314151617181920212223242526272829303132333435363738394041protected void encodeRequest(Channel channel, ChannelBuffer buffer, Request req) throws IOException &#123; Serialization serialization = getSerialization(channel); // header. byte[] header = new byte[HEADER_LENGTH]; // set magic number. Bytes.short2bytes(MAGIC, header); // set request and serialization flag. header[2] = (byte) (FLAG_REQUEST | serialization.getContentTypeId()); if (req.isTwoWay()) header[2] |= FLAG_TWOWAY; if (req.isEvent()) header[2] |= FLAG_EVENT; // set request id. Bytes.long2bytes(req.getId(), header, 4); // encode request data. int savedWriteIndex = buffer.writerIndex(); buffer.writerIndex(savedWriteIndex + HEADER_LENGTH); ChannelBufferOutputStream bos = new ChannelBufferOutputStream(buffer); ObjectOutput out = serialization.serialize(channel.getUrl(), bos); if (req.isEvent()) &#123; encodeEventData(channel, out, req.getData()); &#125; else &#123; encodeRequestData(channel, out, req.getData()); &#125; out.flushBuffer(); if (out instanceof Cleanable) &#123; ((Cleanable) out).cleanup(); &#125; bos.flush(); bos.close(); int len = bos.writtenBytes(); checkPayload(channel, len); Bytes.int2bytes(len, header, 12); // write buffer.writerIndex(savedWriteIndex); buffer.writeBytes(header); // write header. buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len); &#125; 这段代码对应的是前面那张图，Dubbo自己扩展了16字节头部。根据上述代码，可以看到，魔数占用2字节，第三个字节，存储FLAG_REQUEST与序列化器id（如Hessian2Serialization类定义的ID=2，DubboSerialization的id为1，源码可查）以及是FLAG_TWOWAY（双向）还是FLAG_EVENT（单向）。在请求端编码时，未使用第四字节。第5-12共8个字节，用于存储异步变同步的全局唯一ID。第13-16个字节为消息体总长度（消息头+请求数据）。 123456dubbo的消息头是一个定长的 16个字节数据。第1-2个字节：魔数, 一个固定的数字 第3个字节：是双向(有去有回) 或单向（有去无回）的标记 第四个字节：？？？ （request 没有第四个字节）第5-12个字节：请求id：long型8个字节。异步变同步的全局唯一ID，用来做consumer和provider的来回通信标记。第13-16个字节：消息体的长度，也就是消息头+请求数据的长度。 Provider接收数据解码provider端运行dubbo-demo-provider工程，在dubbo-remoting-netty工程NettyCodecAdapter.java内部类InternalDecoder#messageReceived()断点msg = codec.decode(channel, message)： 1234--NettyCodecAdapter.InternalDecoder.messageReceived --&gt;DubboCountCodec.decode --&gt;ExchangeCodec.decode --&gt;ExchangeCodec.decodeBody Provider发送响应结果编码Provider接收到Consumer请求调用后，将返回的数据进行编码发送给consumer. 123456--&gt;NettyCodecAdapter.InternalEncoder.encode --&gt;DubboCountCodec.encode --&gt;ExchangeCodec.encode --&gt;ExchangeCodec.encodeResponse --&gt;DubboCodec.encodeResponseData//先写入一个字节 这个字节可能是RESPONSE_NULL_VALUE:2 RESPONSE_VALUE:1 RESPONSE_WITH_EXCEPTION: 0 正常返回：out.writeByte(RESPONSE_VALUE); out.writeObject(ret); 编码的过程大体都是一样的，但是响应端的编码稍有差别： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384protected void encodeResponse(Channel channel, ChannelBuffer buffer, Response res) throws IOException &#123; int savedWriteIndex = buffer.writerIndex(); try &#123; Serialization serialization = getSerialization(channel); // header. byte[] header = new byte[HEADER_LENGTH]; // set magic number. Bytes.short2bytes(MAGIC, header); // set request and serialization flag. header[2] = serialization.getContentTypeId(); if (res.isHeartbeat()) header[2] |= FLAG_EVENT; // set response status. byte status = res.getStatus(); header[3] = status; // set request id. Bytes.long2bytes(res.getId(), header, 4); buffer.writerIndex(savedWriteIndex + HEADER_LENGTH); ChannelBufferOutputStream bos = new ChannelBufferOutputStream(buffer); ObjectOutput out = serialization.serialize(channel.getUrl(), bos); // encode response data or error message. if (status == Response.OK) &#123; if (res.isHeartbeat()) &#123; encodeHeartbeatData(channel, out, res.getResult()); &#125; else &#123; encodeResponseData(channel, out, res.getResult()); &#125; &#125; else out.writeUTF(res.getErrorMessage()); out.flushBuffer(); if (out instanceof Cleanable) &#123; ((Cleanable) out).cleanup(); &#125; bos.flush(); bos.close(); int len = bos.writtenBytes(); checkPayload(channel, len); Bytes.int2bytes(len, header, 12); // write buffer.writerIndex(savedWriteIndex); buffer.writeBytes(header); // write header. buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len); &#125; catch (Throwable t) &#123; // clear buffer buffer.writerIndex(savedWriteIndex); // send error message to Consumer, otherwise, Consumer will wait till timeout. if (!res.isEvent() &amp;&amp; res.getStatus() != Response.BAD_RESPONSE) &#123; Response r = new Response(res.getId(), res.getVersion()); r.setStatus(Response.BAD_RESPONSE); if (t instanceof ExceedPayloadLimitException) &#123; logger.warn(t.getMessage(), t); try &#123; r.setErrorMessage(t.getMessage()); channel.send(r); return; &#125; catch (RemotingException e) &#123; logger.warn("Failed to send bad_response info back: " + t.getMessage() + ", cause: " + e.getMessage(), e); &#125; &#125; else &#123; // FIXME log error message in Codec and handle in caught() of IoHanndler? logger.warn("Fail to encode response: " + res + ", send bad_response info instead, cause: " + t.getMessage(), t); try &#123; r.setErrorMessage("Failed to send response: " + res + ", cause: " + StringUtils.toString(t)); channel.send(r); return; &#125; catch (RemotingException e) &#123; logger.warn("Failed to send bad_response info back: " + res + ", cause: " + e.getMessage(), e); &#125; &#125; &#125; // Rethrow exception if (t instanceof IOException) &#123; throw (IOException) t; &#125; else if (t instanceof RuntimeException) &#123; throw (RuntimeException) t; &#125; else if (t instanceof Error) &#123; throw (Error) t; &#125; else &#123; throw new RuntimeException(t.getMessage(), t); &#125; &#125; &#125; dubbo的消息头是一个定长的 16个字节数据。第1-2个字节：魔数, 一个固定的数字第3个字节：序列化组件类型，它用于和客户端约定的序列化器ID第四个字节：它是response的结果响应码 OK=20第5-12个字节：请求id：long型8个字节。异步变同步的全局唯一ID，用来做consumer和provider的来回通信标记。第13-16个字节：消息体的长度，也就是消息头+请求数据的长度。 Consumer接收响应结果解码Consumer接收到Provider的响应结果后，将数据进行反序列化，结束调用。 12345--NettyCodecAdapter.InternalDecoder.messageReceived --&gt;DubboCountCodec.decode --&gt;ExchangeCodec.decode --&gt;DubboCodec.decodeBody --&gt;DecodeableRpcResult.decode//根据RESPONSE_NULL_VALUE RESPONSE_VALUE RESPONSE_WITH_EXCEPTION进行响应的处理]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dubbo如何实现SOA的服务降级]]></title>
    <url>%2F2018%2F10%2F05%2Fdubbo%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0SOA%E7%9A%84%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[服务开关对于在线商城，在下单交易环节，可能需要调用A、B、C三个接口来完成，其中A和B是必须的，C只是附加功能（如在下单的时候推荐相关商品或push消息），可有可无，在平时系统没有压力，容量充足的情况下，调用下没问题，但是在类似618店庆之类的大促环节，系统满负荷运行，此时完全可以不调用C接口，怎么实现这个功能？ 改代码？—加个服务开关 服务降级使用dubbo在进行服务调用时，可能由于各种原因（服务器宕机/网络超时/并发数太高等），调用中就会出现RpcException，调用失败。 服务降级就是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行。换句话说，就是指在由于非业务异常导致的服务不可用时，可以返回默认值，避免异常影响主业务的处理。 屏蔽：在大促，促销活动的可预知情况下，例如双11活动。采用直接屏蔽接口访问。（可知） ​ mock=force:returnnull 2.容错：当系统出现非业务异常(比如并发数太高导致超时，网络异常等)时，不对该接口进行处理。（不可知） ​ mock=fail:returnnull Dubbo服务降级配置mock配置方式dubbo官方文档上使用一个mock配置，实现服务降级。mock只在出现非业务异常(比如超时，网络异常等)时执行。mock的配置支持两种，一种为boolean值，默认的为false。如果配置为true，则缺省使用mock类名，即类名+Mock后缀；另外一种则是配置”return null”，可以很简单的忽略掉异常。 mock配置在调用方，服务降级不需要对服务方配置产生修改。下面举个例子说明，mock的配置： 123456789101112/**接口定义*/public interface FooService &#123; public String doSomething(String str);&#125;/**实现类*/public class FooServiceImpl implements FooService &#123; public String doSomething(String str) &#123; System.out.println("service invoke: doSomething ," + str); return "service invoke: doSomething"; &#125;&#125; provider.xml: 12345678910111213141516&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt; &lt;!-- 提供方应用信息，用于计算依赖关系 --&gt; &lt;dubbo:application name="hello-world-app" /&gt; &lt;!-- 使用multicast广播注册中心暴露服务地址 --&gt; &lt;dubbo:registry address="zookeeper://127.0.0.1:2181" /&gt; &lt;!-- 用dubbo协议在20880端口暴露服务 --&gt; &lt;dubbo:protocol name="dubbo" port="20880" /&gt; &lt;!-- 声明需要暴露的服务接口 --&gt; &lt;dubbo:service interface="com.test.service.FooService" ref="fooServerImpl" timeout="10000" /&gt; &lt;!-- 和本地bean一样实现服务 --&gt; &lt;bean id="fooServerImpl" class="com.test.serviceimpl.FooServerImpl" /&gt;&lt;/beans&gt; consumer.xml 12345678910111213&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt; &lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt; &lt;dubbo:application name="dubbo-consumer" /&gt; &lt;dubbo:registry address="zookeeper://127.0.0.1:2181" /&gt; &lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt; &lt;dubbo:reference id="fooService" interface="com.test.service.FooService" timeout="10000" check="false" mock="return null"&gt; &lt;/dubbo:reference&gt;&lt;/beans&gt; 测试在调用端调用服务两个方法，当服务端正常启动时，程序获得正常返回值；当服务提供方没有启动（模拟服务不可用状态）,调用方依然正常运行，调用doSomething获取返回值时null。 mock实现接口方式上面在&lt;dubbuo:reference&gt; 中配置mock=&quot;retrun null&quot; 的配置，在服务降级时会对service中的所有方法做统一处理，即都返回null。但是有的时候我们需要一些方法在服务不可用时告诉我们一些其他信息，以便做其他处理。如更新/删除等。要有较好的区分，可以通过以下的方式。 配置mock=&quot;true&quot; ,同时实现mock接口，类名要注意命名规范：接口名+Mock后缀。此时如果调用失败会调用Mock实现。mock实现需要保证有无参的构造方法。 配置mock=”true”的情况，对于上面的例子即在FooService的同个路径下，添加类FooServiceMock，实现如下： 12345public class FooServiceMock implements FooService &#123; public String doSomething(String str) &#123; return null; &#125;&#125; Dubbo服务降级具体实现通过Dubbo的Filter对Dubbo进行扩展，从而使得每次服务发起调用都可以得到监控，从而可以监控每次服务的调用。 对自动判断服务提供端是否宕机：通过一个记录器对每个方法出现RPC异常进行记录，并且可以配置在某个时间段内连续出现都少个异常可判定为服务提供端出现了宕机，从而进行服务降级。 自动恢复远程服务调用：通过配置检查服务的频率来达到定时检查远程服务是否可用，从而去除服务降级。 判断降级相关配置降级配置分配为应用级别，接口级别，方法级别 。dubbo相关参数配置在dubbo.properties中,默认是在classpath根目录，也可以通过-Ddubbo.properties.file来指定该文件路径。 1.应用级别 123dubbo.reference.default.break.limit:该参数是配置一个方法在指定时间内出现多少个异常则判断为服务提供方宕机 dubbo.reference.default.retry.frequency:该参数配置重试频率，比如配置100，则表示没出现一百次异常则尝试一下远程服务是否可用 dubbo.reference.circuit.break:服务降级功能开关，默认是false，表示关闭状态，可以配置为true 2.接口级别 12dubbo.reference.fullinterfacename.break.limit:同上面dubbo.reference.default−break−limit，指定某个接口dubbo.reference.&#123;fullinterfacename&#125;.retry.frequency:同上面 dubbo.reference.$&#123;fullinterfacename&#125;.circuit.break:服务降级功能开关，默认是false，表示关闭状态，可以配置为true 3.方法级别 123dubbo.reference.fullinterfacename.&#123;methodName&#125;.break.limit:同上面dubbo.reference.default-break-limit，指定某个接口的某个方法 dubbo.reference.fullinterfacename.&#123;methodName&#125;.retry.frequency:同上面dubbo.reference.default-retry-frequency，指定某个接口的某个方法 dubbo.reference.fullinterfacename.&#123;methodName&#125;.circuit.break:服务降级功能开关，默认是false，表示关闭状态，可以配置为true]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dubbo服务响应执行过程]]></title>
    <url>%2F2018%2F10%2F05%2FDubbo%E6%9C%8D%E5%8A%A1%E5%93%8D%E5%BA%94%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[Dubbo总体设计流程 Provider的响应流程：1234567891011121314151617181920212223242526272829303132NettyHandler.messageReceived --&gt;AbstractPeer.received --&gt;MultiMessageHandler.received --&gt;HeartbeatHandler.received --&gt;AllChannelHandler.received --&gt;ChannelEventRunnable.run //线程池 执行线程 --&gt;DecodeHandler.received --&gt;HeaderExchangeHandler.received --&gt;handleRequest(exchangeChannel, request)//网络通信接收处理 --&gt;DubboProtocol.reply --&gt;getInvoker --&gt;exporterMap.get(serviceKey)//从服务暴露里面提取 --&gt;DubboExporter.getInvoker()//最终得到一个invoker---------------------扩展点-------------- --&gt;ProtocolFilterWrapper.invoke --&gt;EchoFilter.invoke --&gt;ClassLoaderFilter.invoke --&gt;GenericFilter.invoke --&gt;TraceFilter.invoke --&gt;MonitorFilter.invoke --&gt;TimeoutFilter.invoke --&gt;ExceptionFilter.invoke --&gt;InvokerWrapper.invoke---------------------扩展点-------------- --&gt;AbstractProxyInvoker.invoke --&gt;JavassistProxyFactory.AbstractProxyInvoker.doInvoke --&gt; 进入真正执行的实现类 DemoServiceImpl.sayHello .................................... --&gt;channel.send(response);//把接收处理的结果，发送回去 --&gt;AbstractPeer.send --&gt;NettyChannel.send --&gt;ChannelFuture future = channel.write(message);//数据发回consumer Consumer接收响应流程：123456789101112NettyHandler.messageReceived --&gt;AbstractPeer.received --&gt;MultiMessageHandler.received --&gt;HeartbeatHandler.received --&gt;AllChannelHandler.received --&gt;ChannelEventRunnable.run //线程池 执行线程 --&gt;DecodeHandler.received --&gt;HeaderExchangeHandler.received --&gt;handleResponse(channel, (Response) message); --&gt;HeaderExchangeHandler.handleResponse --&gt;DefaultFuture.received --&gt;DefaultFuture.doReceived 分析DefaultFuture.doReceived()方法： 1234567891011121314private void doReceived(Response res) &#123; lock.lock(); try &#123; response = res; if (done != null) &#123; done.signal(); &#125; &#125; finally &#123; lock.unlock(); &#125; if (callback != null) &#123; invokeCallback(callback); &#125;&#125; 这里是Dubbo网络通信IO异步转同步的方式。 Dubbo网络通信IO异步转同步Dubbo是基于Netty NIO的非阻塞并行调用通信，通信方式有三种类型，参见DubboInvoker.java： 1.异步，有返回值 修改consumer-dubbo.xml 123&lt;dubbo:reference id="demoService" check="false" interface="com.alibaba.dubbo.demo.DemoService"&gt; &lt;dubbo:method name="sayHello" async="true"/&gt;&lt;/dubbo:reference&gt; 修改Consumer调用代码: 12345DemoService demoService = (DemoService) context.getBean("demoService"); // get remote service proxyString hello = demoService.sayHello("world"); // call remote methodFuture&lt;Object&gt; future = RpcContext.getContext().getFuture();// get resultSystem.out.println(future.get()); 2.异步，无返回值 修改consumer-dubbo.xml 123&lt;dubbo:reference id="demoService" check="false" interface="com.alibaba.dubbo.demo.DemoService"&gt; &lt;dubbo:method name="sayHello" async="false"/&gt;&lt;/dubbo:reference&gt; 修改Consumer调用代码: 1234DemoService demoService = (DemoService) context.getBean("demoService"); // get remote service proxyString hello = demoService.sayHello("world"); // call remote method// get resultSystem.out.println(hello); 3.异步变同步(默认通信方式) A.当前线程怎么让它 ”暂停，等结果回来后，再执行”？—-Future B.socket是一个全双工的通信方式，那么在多线程的情况下，如何知道那个返回结果对应原先那条线程的调用？ —-通过一个全局唯一的ID来做consumer 和 provider 来回传输。 如DefaultFuture： 123456789101112131415161718192021// invoke id. private final long id; private final Channel channel; private final Request request; private final int timeout; private final Lock lock = new ReentrantLock(); private final Condition done = lock.newCondition(); private final long start = System.currentTimeMillis(); private volatile long sent; private volatile Response response; private volatile ResponseCallback callback; public DefaultFuture(Channel channel, Request request, int timeout) &#123; this.channel = channel; this.request = request; this.id = request.getId(); this.timeout = timeout &gt; 0 ? timeout : channel.getUrl().getPositiveParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT); // put into waiting map. FUTURES.put(id, this); CHANNELS.put(id, channel); &#125; 其中的id就是全局通信id，Consumer调用时会设置id，响应时仍然填充返回。]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dubbo请求调用分析]]></title>
    <url>%2F2018%2F10%2F04%2FDubbo%E6%9C%8D%E5%8A%A1%E8%AF%B7%E6%B1%82%E8%B0%83%E7%94%A8%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[接下来分析Consumer的请求调用原理。以运行方式启动provider，以debug模式启动consumer。 我们在DemoConsumer类中打断点作为起点来跟踪具体的调用： 1234567891011121314151617181920public class DemoAction &#123; private DemoService demoService; public void setDemoService(DemoService demoService) &#123; this.demoService = demoService; &#125; public void start() throws Exception &#123; for (int i = 0; i &lt; Integer.MAX_VALUE; i++) &#123; try &#123; String hello = demoService.sayHello("world" + i); System.out.println("[" + new SimpleDateFormat("HH:mm:ss").format(new Date()) + "] " + hello); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; Thread.sleep(2000); &#125; &#125;&#125; 在idea中断点状态下查看表达式的值，可以使用Alt+F8查看。 从demoService.sayHello()说起： 123456789101112131415161718192021222324252627demoService.sayHello("world" + i)--&gt;InvokerInvocationHandler.invoke --&gt;invoker.invoke(new RpcInvocation(method, args)) --&gt;RpcInvocation//所有请求参数都会转换为RpcInvocation --&gt;MockClusterInvoker.invoke(Invocation invocation) //1.进入集群 --&gt;invoker.invoke(invocation) //RpcInvocation [methodName=sayHello, parameterTypes=[class java.lang.String], arguments=[world0], attachments=&#123;&#125;] --&gt;AbstractClusterInvoker.invoke(final Invocation invocation) --&gt;list(invocation) --&gt;directory.list(invocation)//2.进入目录查找 从this.methodInvokerMap里面查找一个Invoker --&gt;AbstractDirectory.list(Invocation invocation) --&gt;doList(invocation) --&gt;RegistryDirectory.doList(Invocation invocation)// 从this.methodInvokerMap里面查找一个Invoker --&gt;router.route //3.进入路由 --&gt;MockInvokersSelector.route(final List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, final Invocation invocation) --&gt;getNormalInvokers(final List&lt;Invoker&lt;T&gt;&gt; invokers) --&gt;ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension("roundrobin") --&gt;return doInvoke(invocation, invokers, loadbalance) --&gt;FailoverClusterInvoker.doInvoke(Invocation invocation, final List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance) --&gt;select(loadbalance, invocation, copyinvokers, invoked) //4.进入负载均衡 --&gt;AbstractClusterInvoker.select //使用loadbalance选择invoker. a)先lb选择，如果在selected列表中 或者 不可用且做检验时，进入下一步(重选),否则直接返回&lt;/br&gt; * b)重选验证规则：selected &gt; available .保证重选出的结果尽量不在select中，并且是可用的 --&gt;doselect(loadbalance, invocation, invokers, selected) ////如果只有一个invoker，则直接返回该invoker；如果有两个则退化成轮训；如果更多则做负载均衡如下： --&gt;loadbalance.select --&gt;AbstractLoadBalance.select //默认做loadbalance --&gt;doSelect --&gt;RoundRobinLoadBalance.doSelect --&gt;return invokers.get(currentSequence % length)//取模轮循 --&gt;Result result = invoker.invoke(invocation) 集群容错的基本流程： Directory目录服务包含StaticDirectory和RegistryDirectory。 其中StaticDirectory是静态的，invoker是固定的；RegistryDirectory是注册目录服务，它的Invoker集合来自于ZK，实现了NotifyListener接口，实现了void notify(List urls);方法，整个过程维护了一个重要变量methodInvokerMap，该map是数据的来源，同时也是notify (RegostryDirectory#notify())的重要操作对象，重点是写操作。（通过doList来完成读操作，通过notify完成写操作, 写操作参照消费者服务引用分析listener.notify(categoryList)）; 下面是读操作： 1234567--&gt;directory.list//2.进入目录查找 从this.methodInvokerMap里面查找一个Invoker --&gt;AbstractDirectory.list --&gt;doList(invocation) //完成读操作 --&gt;RegistryDirectory.doList// 从this.methodInvokerMap里面查找一个Invoker --&gt;router.route //3.进入路由 --&gt;MockInvokersSelector.route --&gt;getNormalInvokers Router路由规则Cluster12345678FailoverCluster：（默认）失败转移，当出现失败，重试其它服务器，通常用于读操作，但重试会带来更长延迟。FailfastCluster：快速失败，只发起一次调用，失败立即报错，通常用于非幂等性的写操作。FailbackCluster：失败自动恢复，后台记录失败请求，定时重发，通常用于消息通知操作。FailsafeCluster：失败安全，出现异常时，直接忽略，通常用于写入审计日志等操作。ForkingCluster：并行调用，只要一个成功即返回，通常用于实时性要求较高的操作，但需要浪费更多服务资源。BroadcastCluster: 广播调用。遍历所有Invokers,逐个调用每个调用catch住异常不影响其他invoker调用MergeableCluster: 分组聚合，按组合并返回结果，比如菜单服务，接口一样，但有多种实现，用group区分，现在消费方需从每种group中调用一次返回结果，合并结果返回，这样就可以实现聚合菜单项。AvailableCluster:获取可用的调用。遍历所有Invokers判断Invoker.isAvalible,只要一个有为true直接调用返回，不管成不成功。 LoadBalance1234RandomLoadBalance：随机，按权重设置随机概率。在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。RoundRobinLoadBalance：轮循，按公约后的权重设置轮循比率。存在慢的提供者累积请求问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。LeastActiveLoadBalance：最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。ConsistentHashLoadBalance：一致性Hash，相同参数的请求总是发到同一提供者。当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。 接着前面的调用流程继续分析，FailoverClusterInvoker#doInvoke(Invocation invocation, final List&lt;Invoker&gt; invokers, LoadBalance loadbalance)： 123456789101112131415161718--&gt;Result result = invoker.invoke(invocation) --&gt;InvokerWrapper.invoke(Invocation invocation) --&gt;ProtocolFilterWrapper.buildInvokerChain() #invoke() --&gt; ConsumerContextFilter.invoke() --&gt;ProtocolFilterWrapper.buildInvokerChain() #invoke() --&gt;MonitorFilter.invoke --&gt;ProtocolFilterWrapper.buildInvokerChain() #invoke() --&gt;FutureFilter.invoke --&gt;ListenerInvokerWrapper.invoke --&gt;AbstractInvoker.invoke --&gt;doInvoke(invocation) --&gt;DubboInvoker.doInvoke --&gt;ReferenceCountExchangeClient.sendRequest --&gt;HeaderExchangeClient.request --&gt;HeaderExchangeChannel.request --&gt;AbstractPeer.send(Object message) --&gt;NettyChannel.send --&gt;ChannelFuture future = channel.writeAndFlush(message);//通过netty的channel发送网络数据]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dubbo服务引用的设计原理]]></title>
    <url>%2F2018%2F10%2F04%2FDubbo%E6%9C%8D%E5%8A%A1%E5%BC%95%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[准备首先为了分析服务引用的过程， 需要在源码中修改注册中心的地址如下： dubbo-demo项目的dubbo-demo-consumer/src/test/resources/dubbo.properties 12#dubbo.registry.address=multicast://224.5.6.7:1234dubbo.registry.address=zookeeper://127.0.0.1:2181 dubbo-demo项目的dubbo-demo-consumer/src/main/resources/META-INF/spring/dubbo-demo-consumer.xml 123&lt;!-- 使用multicast广播注册中心暴露发现服务地址 --&gt;&lt;!--&lt;dubbo:registry address="multicast://224.5.6.7:1234"/&gt;--&gt;&lt;dubbo:registry protocol="zookeeper" address="127.0.0.1:2181"/&gt; 使用两个Idea，分别运行producer和consumer。其中consumer用来断点跟踪。 消费者代码入口代码为： 12345public class DemoConsumer &#123; public static void main(String[] args) &#123; com.alibaba.dubbo.container.Main.main(args); &#125;&#125; 根据dubbo-demo-consumer.xml 12&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt; &lt;dubbo:reference id="demoService" check="false" interface="com.alibaba.dubbo.demo.DemoService"/&gt; reference标签定义的名称空间代码： 12345678910111213141516171819public class DubboNamespaceHandler extends NamespaceHandlerSupport &#123; static &#123; Version.checkDuplicate(DubboNamespaceHandler.class); &#125; public void init() &#123; registerBeanDefinitionParser("application", new DubboBeanDefinitionParser(ApplicationConfig.class, true)); registerBeanDefinitionParser("module", new DubboBeanDefinitionParser(ModuleConfig.class, true)); registerBeanDefinitionParser("registry", new DubboBeanDefinitionParser(RegistryConfig.class, true)); registerBeanDefinitionParser("monitor", new DubboBeanDefinitionParser(MonitorConfig.class, true)); registerBeanDefinitionParser("provider", new DubboBeanDefinitionParser(ProviderConfig.class, true)); registerBeanDefinitionParser("consumer", new DubboBeanDefinitionParser(ConsumerConfig.class, true)); registerBeanDefinitionParser("protocol", new DubboBeanDefinitionParser(ProtocolConfig.class, true)); registerBeanDefinitionParser("service", new DubboBeanDefinitionParser(ServiceBean.class, true)); registerBeanDefinitionParser("reference", new DubboBeanDefinitionParser(ReferenceBean.class, false)); registerBeanDefinitionParser("annotation", new DubboBeanDefinitionParser(AnnotationBean.class, true)); &#125;&#125; 可以看到具体实现为ReferenceBean.java 1public class ReferenceBean&lt;T&gt; extends ReferenceConfig&lt;T&gt; implements FactoryBean, ApplicationContextAware, InitializingBean, DisposableBean &#123; ReferenceBean继承自ReferenceConfig，同时实现了InitializingBean。 123public interface InitializingBean &#123; void afterPropertiesSet() throws Exception;&#125; 那么Spring初始化会调用到ReferenceBean类的afterPropertiesSet()，在该方法中调用getObject()： 123public Object getObject() throws Exception &#123; return get();&#125; 接着调用到ReferenceConfig： 123456789public synchronized T get() &#123; if (destroyed) &#123; throw new IllegalStateException("Already destroyed!"); &#125; if (ref == null) &#123; init(); &#125; return ref;&#125; Dubbo的引用流程：123456789101112131415161718192021222324252627282930313233343536373839404142434445ReferenceBean.getObject() --&gt;ReferenceConfig.get() --&gt;init() --&gt;createProxy(map) --&gt;refprotocol.refer(interfaceClass, urls.get(0)) --&gt;ExtensionLoader.getExtensionLoader(Protocol.class).getExtension("registry"); --&gt;extension.refer(arg0, arg1); --&gt;ProtocolFilterWrapper.refer(Class&lt;T&gt; type, URL url) --&gt;ProtocolListenerWrapper.refer(Class&lt;T&gt; type, URL url) --&gt;RegistryProtocol.refer(Class&lt;T&gt; type, URL url) --&gt;registryFactory.getRegistry(url)//建立zk的连接，和服务端发布一样，省略 --&gt;doRefer(cluster, registry, type, url) --&gt;FailbackRegistry.register(URL url)//创建zk的节点 --&gt;ZookeeperRegistry.doRegister(URL url) --&gt;zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, true)); //节点名为：dubbo/com.alibaba.dubbo.demo.DemoService/consumers ....其余参见服务发布代码 --&gt;registry.subscribe//订阅zk的节点，和服务端发布一样(省略代码)。 /dubbo/com.alibaba.dubbo.demo.DemoService/providers, /dubbo/com.alibaba.dubbo.demo.DemoService/configurators, /dubbo/com.alibaba.dubbo.demo.DemoService/routers] --&gt;notify(url, listener, urls); --&gt;FailbackRegistry.notify(URL url, NotifyListener listener, List&lt;URL&gt; urls) --&gt;doNotify(url, listener, urls); --&gt;AbstractRegistry.notify(URL url, NotifyListener listener, List&lt;URL&gt; urls) --&gt;saveProperties(url);//把服务端的注册url信息更新到C:\Users\dongqiang\.dubbo\dubbo-registry-127.0.0.1.cache --&gt;registryCacheExecutor.execute(new SaveProperties(version));//采用线程池来处理 --&gt;listener.notify(categoryList) --&gt;RegistryDirectory.notify --&gt;refreshInvoker(invokerUrls)//刷新缓存中的invoker列表 --&gt;destroyUnusedInvokers(oldUrlInvokerMap,newUrlInvokerMap); // 关闭未使用的Invoker --&gt;最终目的：刷新Map&lt;String, Invoker&lt;T&gt;&gt; urlInvokerMap 对象 刷新Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; methodInvokerMap对象 --&gt;cluster.join(directory)//加入集群路由 --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension("failover"); --&gt;MockClusterWrapper.join(Directory&lt;T&gt; directory) --&gt;this.cluster.join(directory) --&gt;FailoverCluster.join(Directory&lt;T&gt; directory) --&gt;return new FailoverClusterInvoker&lt;T&gt;(directory) --&gt;new MockClusterInvoker(Directory&lt;T&gt; directory, Invoker&lt;T&gt; invoker) --&gt;proxyFactory.getProxy(invoker)//创建服务代理 --&gt;ProxyFactory$Adpative.getProxy --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension("javassist"); --&gt;StubProxyFactoryWrapper.getProxy(Invoker&lt;T&gt; invoker) --&gt;proxyFactory.getProxy(invoker) --&gt;AbstractProxyFactory.getProxy(Invoker&lt;T&gt; invoker) --&gt;JavassistProxyFactory.getProxy(invoker, interfaces) --&gt;return (T) Proxy.getProxy(interfaces).newInstance(new InvokerInvocationHandler(invoker))，即： --&gt;Proxy.getProxy(interfaces)//代理对象interfaces为：com.alibaba.dubbo.demo.DemoService, interface com.alibaba.dubbo.rpc.service.EchoService --&gt;InvokerInvocationHandler //采用jdk自带的InvocationHandler，创建InvokerInvocationHandler对象。 服务引用的代码中，对于连接注册与订阅zk的流程和服务发布是一致的。 1234567891011public class DemoAction &#123; private DemoService demoService; public void setDemoService(DemoService demoService) &#123; this.demoService = demoService; &#125; 。。。&#125;String hello = demoService.sayHello("world" + i); Spring框架最终将invoker转换为demoService对象。 总结通过流程图将关键节点描述如下：]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dubbo服务发布原理]]></title>
    <url>%2F2018%2F10%2F03%2FDubbo%E6%9C%8D%E5%8A%A1%E5%8F%91%E5%B8%83%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[序修改dubbo-demo子项目的dubbo-demo-provider模块的main/resources/dubbo-demo-provider.xml中注册中心的配置： 123&lt;!-- 使用multicast广播注册中心暴露服务地址 --&gt;&lt;!--&lt;dubbo:registry address="multicast://224.5.6.7:1234"/&gt;--&gt;&lt;dubbo:registry protocol="zookeeper" address="127.0.0.1:2181"/&gt; 同时修改dubbo-demo子项目的dubbo-demo-provider模块的test/resources/dubbo.properties文件中： 12#dubbo.registry.address=multicast://224.5.6.7:1234dubbo.registry.address=zookeeper://127.0.0.1:2181 需要外部下载启动zookeeper组件。 然后启动dubbo-demo-provider/test/java下的DemoProvider观察服务启动日志： 从Provider启动日志可以看到，主要做了6个发布动作： 1234561.暴露本地服务2.暴露远程服务3.启动Netty4.打开连接Zookeeper5.到zookeeper注册6.监听zookeeper 暴露的服务，其实就是dubbo-demo-provider.xml中配置的service： 12&lt;!-- 和本地bean一样实现服务 --&gt;&lt;dubbo:service interface="com.alibaba.dubbo.demo.DemoService" ref="demoService"/&gt; dubbo:service是在dubbo-config-spring下resources/META-INF下的dubbo.xsd约束schema文件中定义的。 而处理Handler在dubbo-config-spring下的schema包下的DubboNamespaceHandler.java中处理： 12345678910111213141516171819public class DubboNamespaceHandler extends NamespaceHandlerSupport &#123; static &#123; Version.checkDuplicate(DubboNamespaceHandler.class); &#125; public void init() &#123; registerBeanDefinitionParser("application", new DubboBeanDefinitionParser(ApplicationConfig.class, true)); registerBeanDefinitionParser("module", new DubboBeanDefinitionParser(ModuleConfig.class, true)); registerBeanDefinitionParser("registry", new DubboBeanDefinitionParser(RegistryConfig.class, true)); registerBeanDefinitionParser("monitor", new DubboBeanDefinitionParser(MonitorConfig.class, true)); registerBeanDefinitionParser("provider", new DubboBeanDefinitionParser(ProviderConfig.class, true)); registerBeanDefinitionParser("consumer", new DubboBeanDefinitionParser(ConsumerConfig.class, true)); registerBeanDefinitionParser("protocol", new DubboBeanDefinitionParser(ProtocolConfig.class, true)); registerBeanDefinitionParser("service", new DubboBeanDefinitionParser(ServiceBean.class, true)); registerBeanDefinitionParser("reference", new DubboBeanDefinitionParser(ReferenceBean.class, false)); registerBeanDefinitionParser("annotation", new DubboBeanDefinitionParser(AnnotationBean.class, true)); &#125;&#125; 可以看到，service标签对应的Bean为ServiceBean。看看ServiceBean类继承关系： 1public class ServiceBean&lt;T&gt; extends ServiceConfig&lt;T&gt; implements InitializingBean, DisposableBean, ApplicationContextAware, ApplicationListener, BeanNameAware 这里ServiceBean继承自ServiceConfig，并且实现了Spring框架的ApplicationListener接口。 123public interface ApplicationListener&lt;E extends ApplicationEvent&gt; extends EventListener &#123; void onApplicationEvent(E var1);&#125; 所以在Spring框架启动时，会去回调执行ServiceBean的onApplicationEvent(e)方法。 12345678910public void onApplicationEvent(ApplicationEvent event) &#123; if (ContextRefreshedEvent.class.getName().equals(event.getClass().getName())) &#123; if (isDelay() &amp;&amp; !isExported() &amp;&amp; !isUnexported()) &#123; if (logger.isInfoEnabled()) &#123; logger.info("The service ready on spring started. service: " + getInterface()); &#125; export(); &#125; &#125;&#125; 执行调用分析如下： 1234567ServiceBean.onApplicationEvent--&gt;export() --&gt;ServiceConfig.export() --&gt;doExport() --&gt;doExportUrls()//里面有一个for循环，代表了一个服务可以有多个通信协议，例如 tcp协议 http协议，默认是tcp协议 --&gt;loadRegistries(true)//从dubbo.properties里面组装registry的url信息：registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;dubbo=2.0.0&amp;owner=william&amp;pid=2752&amp;registry=zookeeper&amp;timestamp=1519438717974 --&gt;doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs) 这里分为本地暴露和远程暴露。那么暴露本地服务和暴露远程服务的区别是什么？ 1.暴露本地服务：指暴露在用一个JVM里面，不用通过调用zk来进行远程通信。例如：在同一个服务，自己调用自己的接口，就没必要进行网络IP连接来通信。 2.暴露远程服务：指暴露给远程客户端的IP和端口号，通过网络来实现通信。 本地暴露123456789101112131415161718192021//配置不是remote的情况下做本地暴露 (配置为remote，则表示只暴露远程服务) --&gt;exportLocal(URL url) //本地暴露 --&gt;proxyFactory.getInvoker(ref, (Class) interfaceClass, local) --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension("javassist"); --&gt;extension.getInvoker(arg0, arg1, arg2) --&gt;StubProxyFactoryWrapper.getInvoker(T proxy, Class&lt;T&gt; type, URL url) --&gt;proxyFactory.getInvoker(proxy, type, url) --&gt;JavassistProxyFactory.getInvoker(T proxy, Class&lt;T&gt; type, URL url) --&gt;Wrapper.getWrapper(com.alibaba.dubbo.demo.provider.DemoServiceImpl) --&gt;makeWrapper(Class&lt;?&gt; c) --&gt;return new AbstractProxyInvoker&lt;T&gt;(proxy, type, url) --&gt;protocol.export(Invoker&lt;T&gt; invoker) --&gt;Protocol$Adpative.export(Invoker&lt;T&gt; invoker) --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension("injvm"); --&gt;extension.export(arg0) //extension为ProtocolFilterWrapper --&gt;ProtocolFilterWrapper.export(Invoker&lt;T&gt; invoker) --&gt;ProtocolFilterWrapper.buildInvokerChain(final Invoker&lt;T&gt; invoker, String key, String group) //创建8个filter --&gt;ProtocolListenerWrapper.export(Invoker&lt;T&gt; invoker) --&gt;InjvmProtocol.export(Invoker&lt;T&gt; invoker) --&gt;return new InjvmExporter&lt;T&gt;(invoker, invoker.getUrl().getServiceKey(), exporterMap) --&gt;exporterMap.put(key, this)//key=com.alibaba.dubbo.demo.DemoService, this=InjvmExporter //这里也是上面整个代码的目的，为了把要暴露的对象存储在exporterMap里 （1）这里的proxyFactory是什么？ 1234567891011121314151617181920212223@SPI("javassist")public interface ProxyFactory &#123; /** * create proxy. * * @param invoker * @return proxy */ @Adaptive(&#123;Constants.PROXY_KEY&#125;) &lt;T&gt; T getProxy(Invoker&lt;T&gt; invoker) throws RpcException; /** * create invoker. * * @param &lt;T&gt; * @param proxy * @param type * @param url * @return invoker */ @Adaptive(&#123;Constants.PROXY_KEY&#125;) &lt;T&gt; Invoker&lt;T&gt; getInvoker(T proxy, Class&lt;T&gt; type, URL url) throws RpcException;&#125; 可以看出proxyFactory是一个代理，作用是获取一个接口的代理类，例如获取一个远程接口的代理。 getInvoker：针对server端，将服务对象，如DemoServiceImpl包装成一个Invoker对象。 getProxy：针对client端，创建接口的代理对象，例如DemoService的接口。 （2）上面还出现了Wrapper，这个又是做什么的？ 它类似spring的BeanWrapper，它就是包装了一个接口或一个类，可以通过wrapper对实例对象进行赋值、取值以及指定方法的调用。 （3）Invoker Invoker：它是一个可执行的对象，能够根据方法的名称、参数得到相应的执行结果。 12345678910111213它里面有一个很重要的方法 Result invoke(Invocation invocation)，Invocation是包含了需要执行的方法和参数等重要信息，目前它只有2个实现类RpcInvocation MockInvocation它有3种类型的Invoker 1.本地执行类的Invoker server端：要执行 demoService.sayHello，就通过InjvmExporter来进行反射执行demoService.sayHello就可以了。 2.远程通信类的Invoker client端：要执行 demoService.sayHello，它封装了DubboInvoker进行远程通信，发送要执行的接口给server端。 server端：采用了AbstractProxyInvoker执行了DemoServiceImpl.sayHello,然后将执行结果返回发送给client. 3.多个远程通信执行类的Invoker聚合成集群版的Invoker client端：要执行 demoService.sayHello，就要通过AbstractClusterInvoker来进行负载均衡，DubboInvoker进行远程通信，发送要执行的接口给server端。 server端：采用了AbstractProxyInvoker执行了DemoServiceImpl.sayHello,然后将执行结果返回发送给client. 远程暴露远程暴露过程中使用Netty进行通信。接着前面分析： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//如果配置不是local则暴露为远程服务.(配置为local，则表示只暴露本地服务) --&gt;proxyFactory.getInvoker//原理和本地暴露一样都是为了获取一个Invoker对象 --&gt;protocol.export(invoker) //invoker: "registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;dubbo=2.0.0&amp;export=dubbo%3A%2F%2F10.168.18.162%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider%26dubbo%3D2.0.0%26generic%3Dfalse%26interface%3Dcom.alibaba.dubbo.demo.DemoService%26loadbalance%3Droundrobin%26methods%3DsayHello%26owner%3Dwilliam%26pid%3D6948%26side%3Dprovider%26timestamp%3D1519691944112&amp;owner=william&amp;pid=6948&amp;registry=zookeeper&amp;timestamp=1519691944048" --&gt;Protocol$Adpative.export(invoker) --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension("registry"); --&gt;extension.export(arg0) --&gt;ProtocolFilterWrapper.export(Invoker&lt;T&gt; invoker) --&gt;ProtocolListenerWrapper.export(Invoker&lt;T&gt; invoker) --&gt;RegistryProtocol.export(final Invoker&lt;T&gt; originInvoker) --&gt;doLocalExport(final Invoker&lt;T&gt; originInvoker) --&gt;getCacheKey(originInvoker);//读取 dubbo://127.0.0.1:20880/ --&gt;protocol.export(invokerDelegete) --&gt;Protocol$Adpative.export(com.alibaba.dubbo.rpc.Invoker arg0) --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension("dubbo"); --&gt;extension.export(arg0) --&gt;ProtocolFilterWrapper.export(Invoker&lt;T&gt; invoker) --&gt;buildInvokerChain(invoker, Constants.SERVICE_FILTER_KEY, Constants.PROVIDER)//创建8个filter --&gt;ProtocolListenerWrapper.export(Invoker&lt;T&gt; invoker) --&gt;DubboProtocol.export(Invoker&lt;T&gt; invoker) //------------1.netty服务暴露的开始 --&gt;serviceKey(url)//组装key=com.alibaba.dubbo.demo.DemoService:20880 --&gt;目的：exporterMap.put(key, exporter); //key=com.alibaba.dubbo.demo.DemoService:20880, exporter=DubboExporter --&gt;openServer(url) --&gt;createServer(url) --&gt;Exchangers.bind(url, requestHandler)//------------2.信息交换层exchanger开始 --&gt;getExchanger(url) --&gt;getExchanger(type) --&gt;ExtensionLoader.getExtensionLoader(Exchanger.class).getExtension("header") --&gt;HeaderExchanger.bind(URL url, ExchangeHandler handler) --&gt;Transporters.bind(url, new DecodeHandler(new HeaderExchangeHandler(handler))) --&gt;new HeaderExchangeHandler(handler)//this.handler = handler --&gt;new DecodeHandler --&gt;new AbstractChannelHandlerDelegate//this.handler = handler; --&gt;Transporters.bind(URL url, ChannelHandler... handlers)//----3.网络传输层 transporter --&gt;getTransporter() --&gt;ExtensionLoader.getExtensionLoader(Transporter.class).getAdaptiveExtension() --&gt;Transporter$Adpative.bind --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension("netty"); --&gt;extension.bind(arg0, arg1) --&gt;NettyTransporter.bind(URL url, ChannelHandler listener) --new NettyServer(url, listener) --&gt;AbstractPeer //this.url = url; this.handler = handler; --&gt;AbstractEndpoint//codec timeout=1000 connectTimeout=3000 --&gt;AbstractServer //bindAddress accepts=0 idleTimeout=600000 --&gt;doOpen() //---------------4.打开连接，暴露netty服务 --&gt;设置 NioServerSocketChannelFactory boss worker的线程池 线程个数为3 --&gt;设置编解码 hander --&gt;bootstrap.bind(getBindAddress()) --&gt;new HeaderExchangeServer --&gt;this.server=NettyServer --&gt;heartbeat=60000 --&gt;heartbeatTimeout=180000 --&gt;startHeatbeatTimer()//这是一个心跳定时器，采用了线程池，如果断开就心跳重连。 ①Protocol 1.export：暴露远程服务（用于服务端），就是将proxyFactory.getInvoker创建的代理类 invoker对象，通过协议暴露给外部。 2.refer：引用远程服务（用于客户端）， 通过proxyFactory.getProxy来创建远程的动态代理类，例如DemoService的远程动态接口。 ②exporter：维护invoker的生命周期。 ③exchanger：信息交换层，封装请求响应模式，同步转异步。 ④transporter：网络传输层，用来抽象netty和mina的统一接口。 接着前面Netty分析之后，来分析Dubbo中的Zookeeper使用机制。 关注如下三个问题： ①dubbo如何连接zookeeper？ 123456789101112131415161718192021222324 --&gt;getRegistry(originInvoker)//连接zookeeper --&gt;registryFactory.getRegistry(registryUrl) --&gt;ExtensionLoader.getExtensionLoader(RegistryFactory.class).getExtension("zookeeper"); --&gt;extension.getRegistry(arg0) --&gt;AbstractRegistryFactory.getRegistry//创建一个注册中心，存储在REGISTRIES --&gt;createRegistry(url) --&gt;new ZookeeperRegistry(url, zookeeperTransporter) --&gt;AbstractRegistry(URL url) --&gt;loadProperties()//目的：把C:\Users\dongqiang\.dubbo\dubbo-registry-127.0.0.1.cache 文件中的内容加载为properties --&gt;notify(url.getBackupUrls())//不做任何事 --&gt;FailbackRegistry --&gt;retryExecutor.scheduleWithFixedDelay(new Runnable()//建立线程池，检测并连接注册中心,如果失败了就重连 --&gt;ZookeeperRegistry --&gt;zookeeperTransporter.connect(url) --&gt;ZookeeperTransporter$Adpative.connect(url) --&gt;ExtensionLoader.getExtensionLoader(ZookeeperTransporter.class).getExtension("zkclient"); --&gt;extension.connect(arg0) --&gt;ZkclientZookeeperTransporter.connect(URL url) --&gt;new ZkclientZookeeperClient(url) --&gt;调用super: AbstractZookeeperClient(URL url)--&gt;new ZkClient(url.getBackupAddress());//连接ZK --&gt;client.subscribeStateChanges(new IZkStateListener()//订阅的目的：连接断开时重连 --&gt;zkClient.addStateListener(new StateListener() --&gt;recover //连接失败时重连 ②dubbo如何创建zookeeper节点？ 123456789--&gt;registry.register(registedProviderUrl)//创建节点 --&gt;AbstractRegistry.register --&gt;FailbackRegistry.register --&gt;doRegister(url)//向zk服务器端发送注册请求 --&gt;ZookeeperRegistry.doRegister(URL url) --&gt;zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, true)) --&gt;AbstractZookeeperClient.create///dubbo/com.alibaba.dubbo.demo.DemoService/providers/dubbo%3A%2F%2F10.168.18.162%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider%26dubbo%3D2.0.0%26generic%3Dfalse%26interface%3Dcom.alibaba.dubbo.demo.DemoService%26loadbalance%3Droundrobin%26methods%3DsayHello%26owner%3Dwilliam%26pid%3D7832%26side%3Dprovider%26timestamp%3D1519804577146 --&gt;createEphemeral(path);//临时节点 dubbo%3A%2F%2F10.168.18.162%3A20880%2F............. --&gt;createPersistent(path);//持久化节点 dubbo/com.alibaba.dubbo.demo.DemoService/providers zk持久化节点和临时节点有什么区别？ 持久化节点：一旦被创建，除非主动删除掉，否则就一直存储在zk里面。 临时节点：与客户端会话绑定，一旦客户端会话失效，这个客户端端所创建的所有临时节点都会被删除。Dubbo对注册的服务使用临时节点，保证服务断掉时节点自动被移除，以免订阅者一直订阅。比如服务端已经挂了，但是在Zk中仍然存在，那么客户端还是会去请求和监听，那么会一直失败。 ③dubbo如何订阅zookeeper信息？ 123456789101112131415161718192021222324 --&gt;registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);//订阅ZK --&gt;AbstractRegistry.subscribe --&gt;FailbackRegistry.subscribe --&gt;doSubscribe(url, listener)// 向服务器端发送订阅请求 --&gt;ZookeeperRegistry.doSubscribe(final URL url, final NotifyListener listener) --&gt;new ChildListener() &#123;--&gt;实现childChanged(String parentPath, List&lt;String&gt; currentChilds) --&gt;实现并执行ZookeeperRegistry.this.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds)); //A --&gt;zkClient.create(path, false);//第一步：先创建持久化节点/dubbo/com.alibaba.dubbo.demo.DemoService/configurators --&gt;zkClient.addChildListener(path, zkListener) --&gt;AbstractZookeeperClient.addChildListener(path, listener) //C --&gt;createTargetChildListener(path, listener)//第三步：收到订阅后的处理，交给FailbackRegistry.notify处理 --&gt;ZkclientZookeeperClient.createTargetChildListener(String path, final ChildListener listener) --&gt;new IZkChildListener() --&gt;实现了 handleChildChange //收到订阅后的处理 --&gt;listener.childChanged(parentPath, currentChilds); --&gt;实现并执行ZookeeperRegistry.this.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds)); --&gt;收到订阅后处理 FailbackRegistry.notify //B --&gt;addTargetChildListener(path, targetListener)////第二步 --&gt;ZkclientZookeeperClient.addTargetChildListener --&gt;client.subscribeChildChanges(path, listener)//第二步：启动加入订阅/dubbo/com.alibaba.dubbo.demo.DemoService/configurators 最后再跟一下notify的处理流程： 123456789--&gt;notify(url, listener, urls) --&gt;FailbackRegistry.notify --&gt;doNotify(url, listener, urls); --&gt;AbstractRegistry.notify --&gt;saveProperties(url);//把服务端的注册url信息更新到C:\Users\dongqiang\.dubbo\dubbo-registry-192.168.48.117.cache --&gt;registryCacheExecutor.execute(new SaveProperties(version));//采用线程池来处理 --&gt;listener.notify(categoryList) --&gt;RegistryProtocol.notify --&gt;RegistryProtocol.this.getProviderUrl(originInvoker)//通过invoker的url 获取 providerUrl的地址 整个服务发布流程如下：]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dubbo的动态编译]]></title>
    <url>%2F2018%2F10%2F02%2FDubbo%E7%9A%84%E5%8A%A8%E6%80%81%E7%BC%96%E8%AF%91%2F</url>
    <content type="text"><![CDATA[前面分析SPI机制时，提到createAdaptiveExtensionClass()自动生成和编译一个动态的adpative类。 Compiler的类继承关系： 在Dubbo实现中，默认使用JavassistCompiler进行动态编译，不使用JdKComplier。这一点从Compiler接口的实现中可以看出。 123456789101112@SPI("javassist")public interface Compiler &#123; /** * Compile java source code. * * @param code Java source code * @param classLoader TODO * @return Compiled class */ Class&lt;?&gt; compile(String code, ClassLoader classLoader);&#125; 可以看到，这里使用了@SPI注解，指定了使用javassist。 回顾前面的调用流程： 123456789--&gt;createAdaptiveExtensionClass() --&gt;createAdaptiveExtensionClassCode() --&gt;com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension(); --&gt;compiler.compile(code, classLoader) --&gt;AdaptiveCompiler.compile(code, classLoader) --&gt;AbstractCompiler.compile(code, classLoader) --&gt;Class&lt;?&gt; doCompile(String name, String source) --&gt;JavassistCompiler.doCompile(String name, String source) --&gt;cls.toClass(ClassHelper.getCallerClassLoader(getClass()), JavassistCompiler.class.getProtectionDomain());//编译成class返回 根据前面分析SPI机制时得出的结论： 123getExtensionLoader(Class&lt;T&gt; type) 就是为该接口new 一个ExtensionLoader，然后缓存起来。getAdaptiveExtension() 获取一个扩展类，如果@Adaptive注解在类上就是一个装饰类；如果注解在方法上就是一个动态代理类，例如Protocol$Adaptive对象。getExtension(String name) 获取一个指定对象。 这里首先为Compiler接口创建了一个ExtensionLoader。然后调用getAdaptiveExtension()获取扩展类。那么这个Compiler是一个装饰类还是一个动态代理类？从上面的Compiler接口的定义并不能看出，跟进compile()方法来看: 12@Adaptivepublic class AdaptiveCompiler implements Compiler 所以Compiler是一个装饰类。 接着看createAdaptiveExtensionClass()具体实现： 123456private Class&lt;?&gt; createAdaptiveExtensionClass() &#123; String code = createAdaptiveExtensionClassCode(); ClassLoader classLoader = findClassLoader(); com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension(); return compiler.compile(code, classLoader);&#125; 这里会执行到AdaptiveCompiler的实现： 123456789101112131415161718192021@Adaptivepublic class AdaptiveCompiler implements Compiler &#123; private static volatile String DEFAULT_COMPILER; public static void setDefaultCompiler(String compiler) &#123; DEFAULT_COMPILER = compiler; &#125; public Class&lt;?&gt; compile(String code, ClassLoader classLoader) &#123; Compiler compiler; ExtensionLoader&lt;Compiler&gt; loader = ExtensionLoader.getExtensionLoader(Compiler.class); String name = DEFAULT_COMPILER; // copy reference if (name != null &amp;&amp; name.length() &gt; 0) &#123; compiler = loader.getExtension(name); &#125; else &#123; compiler = loader.getDefaultExtension(); &#125; return compiler.compile(code, classLoader); &#125;&#125; 这里DEFAULT_COMPILER执行compile时并未赋值，所以会执行else分支，这里最终会根据@SPI(“javassist”)获取JavassistCompiler。然后使用其compile()进行编译code，这里会调用到抽象类AbstractCompiler的实现： 123456789101112131415161718192021222324252627282930313233343536373839404142public abstract class AbstractCompiler implements Compiler &#123; private static final Pattern PACKAGE_PATTERN = Pattern.compile("package\\s+([$_a-zA-Z][$_a-zA-Z0-9\\.]*);"); private static final Pattern CLASS_PATTERN = Pattern.compile("class\\s+([$_a-zA-Z][$_a-zA-Z0-9]*)\\s+"); public Class&lt;?&gt; compile(String code, ClassLoader classLoader) &#123; code = code.trim(); Matcher matcher = PACKAGE_PATTERN.matcher(code); String pkg; if (matcher.find()) &#123; pkg = matcher.group(1); &#125; else &#123; pkg = ""; &#125; matcher = CLASS_PATTERN.matcher(code); String cls; if (matcher.find()) &#123; cls = matcher.group(1); &#125; else &#123; throw new IllegalArgumentException("No such class name in " + code); &#125; String className = pkg != null &amp;&amp; pkg.length() &gt; 0 ? pkg + "." + cls : cls; try &#123; return Class.forName(className, true, ClassHelper.getCallerClassLoader(getClass())); &#125; catch (ClassNotFoundException e) &#123; if (!code.endsWith("&#125;")) &#123; throw new IllegalStateException("The java code not endsWith \"&#125;\", code: \n" + code + "\n"); &#125; try &#123; return doCompile(className, code); &#125; catch (RuntimeException t) &#123; throw t; &#125; catch (Throwable t) &#123; throw new IllegalStateException("Failed to compile class, cause: " + t.getMessage() + ", class: " + className + ", code: \n" + code + "\n, stack: " + ClassUtils.toString(t)); &#125; &#125; &#125; protected abstract Class&lt;?&gt; doCompile(String name, String source) throws Throwable;&#125; 在上述代码中首先会去使用类加载器Class.forName去加载目标类，如果类本身（如动态代理类$Adaptive）不存在则会走到异常处理代码，doCompile()这里会调用到JavassistCompiler的具体实现。 在该类中最后会返回编译的class： 1cls.toClass(ClassHelper.getCallerClassLoader(getClass()), JavassistCompiler.class.getProtectionDomain());]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dubbo之Spi机制分析]]></title>
    <url>%2F2018%2F10%2F02%2FDubbo%E4%B9%8BSpi%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[一、Dubbo内核Dubbo内核主要包含SPI、AOP、IOC、Compiler。 二、JDK的SPI1.spi的设计目标： 面向对象的设计里，模块之间是基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可插拔的原则，如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候，不在模块里写死代码，就需要一种服务发现机制。Java SPI就提供了这样一种机制：为某个接口寻找服务实现，有点类似IOC思想，将装配的控制权移到代码之外。 2.JDK的SPI的默认约定 当服务的提供者提供了一个接口的多种实现时，一般会在jar包的META-INF/services目录下，创建该接口的同名文件，文件的内容就是该服务接口的具体实现类的全类名。 三、Dubbo为什么不采用JDK的SPIJDK标准的SPI会一次性实例化扩展点所有实现，如果有扩展实现初始化很耗时。但如果没用上也加载，会很浪费资源。针对这个问题，Dubbo增加了对扩展点IoC和AOP的支持，一个扩展点可以直接setter注入其它扩展点。 四、Dubbo SPI的默认约定1.spi 文件存储路径在META-INF\dubbo\internal 目录下并且文件名为接口的全路径名。即接口文件的全类名。 2.每个spi 文件里面的格式定义为： 扩展名=具体的类名，例如 dubbo=com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtoco。使用时通过key加载（如dubbo），可以实现部分加载。 五、SPI示例遵循上述第一条第2点，这里Command为接口文件，其中StartCommand和ShutdownCommand为两个实现类。需要在resources目录下建META-INF子目录，在META-INF下建services目录，然后以接口全路径作为文件名创建文件，内容为接口实现类的全类型名。 Command.java 1234567package com.dongqiang.soa.spi;/** * Created by qiangdong on 2018/2/2. */public interface Command &#123; void execute();&#125; StartCommand.java 12345678910package com.dongqiang.soa.spi;/** * Created by qiangdong on 2018/2/2. */public class StartCommand implements Command &#123;@Override public void execute() &#123; System.out.println("start command."); &#125;&#125; ShutdownCommand.java 1234567891011package com.dongqiang.soa.spi;/** * Created by qiangdong on 2018/2/2. */public class ShutdownCommand implements Command &#123; @Override public void execute() &#123; System.out.println("ShutdownCommand"); &#125;&#125; Main类： 12345678910111213141516package com.dongqiang.soa.spi;import java.util.ServiceLoader;/** * Created by qiangdong on 2018/2/2. */public class Main &#123; public static void main(String[] args) &#123; ServiceLoader&lt;Command&gt; serviceLoader = ServiceLoader.load(Command.class); for (Command command : serviceLoader) &#123; command.execute(); &#125; &#125;&#125; 六、结合Dubbo源码分析Spi如前所说，Dubbo SPI的目的是获取一个指定实现类的对象。那么Dubbo是通过什么方式获取的呢？其实是调用ExtensionLoader.getExtension(String name)实现。 具体实现途径有三种： ①getExtensionLoader(Class type) 为type接口new一个ExtensionLoader，然后缓存起来。 ②getAdaptiveExtension() 获取一个扩展装饰类的对象，这个类有一个规则，如果它没有@Adaptive注解，就动态创建一个装饰类，例如Protocol$Adaptive对象。 ③getExtension(String name) 获取一个指定对象。 （1）分析ExtensionLoader.getExtensionLoader(Class type) Dubbo的第一行代码在哪里？ idea导入Dubbo源码，在子模块dubbo-demo-provider/src/test下有DemoProvider.java 12345678package com.alibaba.dubbo.demo.provider;public class DemoProvider &#123; public static void main(String[] args) &#123; com.alibaba.dubbo.container.Main.main(args); &#125;&#125; 这里便是代码的入口。 这里调到com.alibaba.dubbo.container.Main.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384package com.alibaba.dubbo.container;import com.alibaba.dubbo.common.Constants;import com.alibaba.dubbo.common.extension.ExtensionLoader;import com.alibaba.dubbo.common.logger.Logger;import com.alibaba.dubbo.common.logger.LoggerFactory;import com.alibaba.dubbo.common.utils.ConfigUtils;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import java.util.List;/** * Main. (API, Static, ThreadSafe) * * @author william.liangf */public class Main &#123; public static final String CONTAINER_KEY = "dubbo.container"; public static final String SHUTDOWN_HOOK_KEY = "dubbo.shutdown.hook"; private static final Logger logger = LoggerFactory.getLogger(Main.class); private static final ExtensionLoader&lt;Container&gt; loader = ExtensionLoader.getExtensionLoader(Container.class); private static volatile boolean running = true; public static void main(String[] args) &#123; try &#123; if (args == null || args.length == 0) &#123; String config = ConfigUtils.getProperty(CONTAINER_KEY, loader.getDefaultExtensionName()); args = Constants.COMMA_SPLIT_PATTERN.split(config); &#125; final List&lt;Container&gt; containers = new ArrayList&lt;Container&gt;(); for (int i = 0; i &lt; args.length; i++) &#123; containers.add(loader.getExtension(args[i])); &#125; logger.info("Use container type(" + Arrays.toString(args) + ") to run dubbo serivce."); if ("true".equals(System.getProperty(SHUTDOWN_HOOK_KEY))) &#123; Runtime.getRuntime().addShutdownHook(new Thread() &#123; public void run() &#123; for (Container container : containers) &#123; try &#123; container.stop(); logger.info("Dubbo " + container.getClass().getSimpleName() + " stopped!"); &#125; catch (Throwable t) &#123; logger.error(t.getMessage(), t); &#125; synchronized (Main.class) &#123; running = false; Main.class.notify(); &#125; &#125; &#125; &#125;); &#125; for (Container container : containers) &#123; container.start(); logger.info("Dubbo " + container.getClass().getSimpleName() + " started!"); &#125; System.out.println(new SimpleDateFormat("[yyyy-MM-dd HH:mm:ss]").format(new Date()) + " Dubbo service server started!"); &#125; catch (RuntimeException e) &#123; e.printStackTrace(); logger.error(e.getMessage(), e); System.exit(1); &#125; synchronized (Main.class) &#123; while (running) &#123; try &#123; Main.class.wait(); &#125; catch (Throwable e) &#123; &#125; &#125; &#125; &#125;&#125; 可以看到，Main类中定义了一系列的静态成员变量，其中： 1private static final ExtensionLoader&lt;Container&gt; loader = ExtensionLoader.getExtensionLoader(Container.class); 在Main类初始化阶段调用了上述第①条方式为Container创建扩展点。 通过断点跟进getExtensionLoader方法，会进行new ExtensionLoader(type)构造： 1234private ExtensionLoader(Class&lt;?&gt; type) &#123; this.type = type; objectFactory = (type == ExtensionFactory.class ? null : ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension()); &#125; 可以看到，这里会进一步调用getExtensionLoader方法，只是这次传入的是ExtensionFactory.class。通过上面的代码知道，等价于如下： 12this.type = type;objectFactory = null; 执行以上代码完成了2个属性的初始化： 1.每个ExtensionLoader都包含了2个值： type 和 objectFactory Class&lt;?&gt; type；//构造器初始化时要得到的接口名 ExtensionFactory objectFactory//构造器初始化时设置为AdaptiveExtensionFactory，Dubbo内部默认的实现是SpiExtensionFactory和SpringExtensionFactory。 2.new 一个ExtensionLoader 存储在ConcurrentMap&lt;Class&lt;?&gt;, ExtensionLoader&lt;?&gt;&gt; EXTENSION_LOADERS里。 关于objectFactory 1.objectFactory就是ExtensionFactory，它也是通过ExtensionLoader.getExtensionLoader(ExtensionFactory.class)来实现的，但是它的objectFactory=null 2.objectFactory作用，它就是为dubbo的IOC提供所有对象。 （2）分析getAdaptiveExtension() 为什么要设计Adaptive？ Adaptive注解在类和方法上有什么区别？ ①注解在类上，代表人工实现编码，即实现了一个装饰类，如ExtensionFactory。 ②注解在方法上，代表自动生成和编译一个动态的adaptive类，如Protocol$Adaptive。 接下来从子模块dubbo-config-spring下的schema包的DubboNamespaceHandler开始分析： 1234567891011121314151617181920212223242526272829303132333435363738394041package com.alibaba.dubbo.config.spring.schema;import com.alibaba.dubbo.common.Version;import com.alibaba.dubbo.config.ApplicationConfig;import com.alibaba.dubbo.config.ConsumerConfig;import com.alibaba.dubbo.config.ModuleConfig;import com.alibaba.dubbo.config.MonitorConfig;import com.alibaba.dubbo.config.ProtocolConfig;import com.alibaba.dubbo.config.ProviderConfig;import com.alibaba.dubbo.config.RegistryConfig;import com.alibaba.dubbo.config.spring.AnnotationBean;import com.alibaba.dubbo.config.spring.ReferenceBean;import com.alibaba.dubbo.config.spring.ServiceBean;import org.springframework.beans.factory.xml.NamespaceHandlerSupport;/** * DubboNamespaceHandler * * @author william.liangf * @export */public class DubboNamespaceHandler extends NamespaceHandlerSupport &#123; static &#123; Version.checkDuplicate(DubboNamespaceHandler.class); &#125; public void init() &#123; registerBeanDefinitionParser("application", new DubboBeanDefinitionParser(ApplicationConfig.class, true)); registerBeanDefinitionParser("module", new DubboBeanDefinitionParser(ModuleConfig.class, true)); registerBeanDefinitionParser("registry", new DubboBeanDefinitionParser(RegistryConfig.class, true)); registerBeanDefinitionParser("monitor", new DubboBeanDefinitionParser(MonitorConfig.class, true)); registerBeanDefinitionParser("provider", new DubboBeanDefinitionParser(ProviderConfig.class, true)); registerBeanDefinitionParser("consumer", new DubboBeanDefinitionParser(ConsumerConfig.class, true)); registerBeanDefinitionParser("protocol", new DubboBeanDefinitionParser(ProtocolConfig.class, true)); registerBeanDefinitionParser("service", new DubboBeanDefinitionParser(ServiceBean.class, true)); registerBeanDefinitionParser("reference", new DubboBeanDefinitionParser(ReferenceBean.class, false)); registerBeanDefinitionParser("annotation", new DubboBeanDefinitionParser(AnnotationBean.class, true)); &#125;&#125; 先来看 1registerBeanDefinitionParser("service", new DubboBeanDefinitionParser(ServiceBean.class, true)); 这里ServiceBean继承自ServiceConfig类。 123456789public class ServiceConfig&lt;T&gt; extends AbstractServiceConfig &#123; private static final long serialVersionUID = 3033787999037024738L; private static final Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension(); private static final ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();....&#125; 在这里通过getAdaptiveExtension()获取protocol。 1234567891011--&gt;getAdaptiveExtension()//为cachedAdaptiveInstance赋值 --&gt;createAdaptiveExtension() --&gt;getAdaptiveExtensionClass()//该方法看出，如果是预定义的类就直接返回，不然动态生成适配类 --&gt;getExtensionClasses()//为cachedClasses 赋值 --&gt;loadExtensionClasses() --&gt;loadFile(..) --&gt;createAdaptiveExtensionClass()//自动生成和编译一个动态的adpative类，这个类是一个代理类 --&gt;ExtensionLoader.getExtensionLoader (com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension() --&gt;compiler.compile(code, classLoader) --&gt;injectExtension()//作用：进入IOC的反转控制模式，实现了动态注入 loadFile(..)方法的作用：把SPI配置文件（如META-INF/dubbo/internal/com.alibaba.dubbo.rpc.Protocol）的内容，存储在缓存变量里。使用了四个缓存变量。 ①缓存包含Adaptive注解的类 cachedAdaptiveClass 如果这个Class含有adaptive注解就赋值进去，如ExtensionFactory有，而Protocol没有。 ②缓存无Adaptive注解的封装类 cachedWrapperClasses 只有当该class无adaptive注解，并且构造方法参数为目标接口(type，如Protocol)类型，如Protocol里的SPI就只有ProtocolFilterWrapper和ProtocolListenerWrapper能命中，如下例： 123456789101112public class ProtocolFilterWrapper implements Protocol &#123; private final Protocol protocol; public ProtocolFilterWrapper(Protocol protocol) &#123; if (protocol == null) &#123; throw new IllegalArgumentException("protocol == null"); &#125; this.protocol = protocol; &#125; 。。。&#125; ③cachedActivates 剩下的包含Activate注解的类 ④cachedName 剩下的类存储在该map中 在loadExtensionClasses()方法中，有三处loadFile()加载SPI文件： 1234567891011121314151617181920private Map&lt;String, Class&lt;?&gt;&gt; loadExtensionClasses() &#123; final SPI defaultAnnotation = type.getAnnotation(SPI.class); if (defaultAnnotation != null) &#123; String value = defaultAnnotation.value(); if (value != null &amp;&amp; (value = value.trim()).length() &gt; 0) &#123; String[] names = NAME_SEPARATOR.split(value); if (names.length &gt; 1) &#123; throw new IllegalStateException("more than 1 default extension name on extension " + type.getName() + ": " + Arrays.toString(names)); &#125; if (names.length == 1) cachedDefaultName = names[0]; &#125; &#125; Map&lt;String, Class&lt;?&gt;&gt; extensionClasses = new HashMap&lt;String, Class&lt;?&gt;&gt;(); loadFile(extensionClasses, DUBBO_INTERNAL_DIRECTORY); loadFile(extensionClasses, DUBBO_DIRECTORY); loadFile(extensionClasses, SERVICES_DIRECTORY); return extensionClasses; &#125; 这里的三处loadFile()实际上起到真正作用的是第一个：路径为META-INF/dubbo/internal/，这个打开dubbo.jar即可看到，这里仍然看com.alibaba.dubbo.rpc.Protocol这个SPI文件： 12345678910111213registry=com.alibaba.dubbo.registry.integration.RegistryProtocoldubbo=com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocolfilter=com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapperlistener=com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrappermock=com.alibaba.dubbo.rpc.support.MockProtocolinjvm=com.alibaba.dubbo.rpc.protocol.injvm.InjvmProtocolrmi=com.alibaba.dubbo.rpc.protocol.rmi.RmiProtocolhessian=com.alibaba.dubbo.rpc.protocol.hessian.HessianProtocolcom.alibaba.dubbo.rpc.protocol.http.HttpProtocolcom.alibaba.dubbo.rpc.protocol.webservice.WebServiceProtocolthrift=com.alibaba.dubbo.rpc.protocol.thrift.ThriftProtocolmemcached=com.alibaba.dubbo.rpc.protocol.memcached.MemcachedProtocolredis=com.alibaba.dubbo.rpc.protocol.redis.RedisProtocol 上面执行compile时，框架会自动生成如下Protocol$Adpative类代码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com.alibaba.dubbo.rpc;import com.alibaba.dubbo.common.extension.ExtensionLoader;public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol &#123; public void destroy() &#123; throw new UnsupportedOperationException( "method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!"); &#125; public int getDefaultPort() &#123; throw new UnsupportedOperationException( "method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!"); &#125; public com.alibaba.dubbo.rpc.Exporter export( com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException &#123; if (arg0 == null) throw new IllegalArgumentException( "com.alibaba.dubbo.rpc.Invoker argument == null"); if (arg0.getUrl() == null) throw new IllegalArgumentException( "com.alibaba.dubbo.rpc.Invoker argument getUrl() == null"); com.alibaba.dubbo.common.URL url = arg0.getUrl(); String extName = (url.getProtocol() == null ? "dubbo" : url .getProtocol()); if (extName == null) throw new IllegalStateException( "Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])"); com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader .getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class) .getExtension(extName); return extension.export(arg0);//自己执行自己，说明当前类是一个代理类 &#125; public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException &#123; if (arg1 == null) throw new IllegalArgumentException("url == null"); com.alibaba.dubbo.common.URL url = arg1; String extName = (url.getProtocol() == null ? "dubbo" : url .getProtocol()); if (extName == null) throw new IllegalStateException( "Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])"); com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader .getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class) .getExtension(extName); return extension.refer(arg0, arg1);//自己执行自己，说明当前类是一个代理类 &#125;&#125; 其实就是根据如下模板生成的： 12345678910111213141516171819202122package &lt;扩展点接口所在包&gt;; public class &lt;扩展点接口名&gt;$Adpative implements &lt;扩展点接口&gt; &#123; public &lt;有@Adaptive注解的接口方法&gt;(&lt;方法参数&gt;) &#123; if(是否有URL类型方法参数?) 使用该URL参数 else if(是否有方法类型上有URL属性) 使用该URL属性 # &lt;else 在加载扩展点生成自适应扩展点类时抛异常，即加载扩展点失败！&gt; if(获取的URL == null) &#123; throw new IllegalArgumentException("url == null"); &#125; 根据@Adaptive注解上声明的Key的顺序，从URL获致Value，作为实际扩展点名。 如URL没有Value，则使用缺省扩展点实现。如没有扩展点， throw new IllegalStateException("Fail to get extension"); 在扩展点实现调用该方法，并返回结果。 &#125; public &lt;有@Adaptive注解的接口方法&gt;(&lt;方法参数&gt;) &#123; throw new UnsupportedOperationException("is not adaptive method!"); &#125;&#125; 总结起来，Dubbo的所有对象都是通过ExtensionLoader获取的，SPI是内核。 （3）分析getExtension(String name) 为了进一步分析代理类的扩展类对象生成过程，将Protocol$Adpative类手动创建到dubbo源码子模块dubbo-demo下的dubbo-demo-provider中，test目录下新建包com.alibaba.dubbo.rpc。然后将上述代码拷贝其中。 然后在getExtension(extName)这里设置断点： 通过断点跟踪，调用链如下： 1234567891011--&gt;getExtension(String name) //指定对象缓存在cachedInstances；get出来的对象可能是wrapper对象，例如protocol就是ProtocolFilterWrapper和ProtocolListenerWrapper其中一个。 --&gt;createExtension(String name) --&gt;getExtensionClasses() //前面已经分析过，就是使用loadFile读取文件并缓存 --&gt;injectExtension(T instance)//dubbo的IOC反转控制，就是从spi和spring里面提取对象赋值。 --&gt;objectFactory.getExtension(pt, property)//通过ExtensionFactory获取extension，有两种 --&gt;①SpiExtensionFactory.getExtension(type, name) --&gt;ExtensionLoader.getExtensionLoader(type) --&gt;loader.getAdaptiveExtension() --&gt;②SpringExtensionFactory.getExtension(type, name) --&gt;context.getBean(name) --&gt;injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance))//AOP的简单设计，这个地方如果前面的wrapperClasses缓存不空，那么就会执行这句代码，如Protocol中只有Filter和Listener，通过使用ProtocolFilterWrapper或ProtocolListenerWrapper的构造方法反射然后注入 通过上述分析，总结起来SPI getExtension()的执行流程及设计模式如下：]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
</search>
