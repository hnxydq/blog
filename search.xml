<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Dubbo服务发布原理]]></title>
    <url>%2F2018%2F10%2F03%2FDubbo%E6%9C%8D%E5%8A%A1%E5%8F%91%E5%B8%83%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[序修改dubbo-demo子项目的dubbo-demo-provider模块的main/resources/dubbo-demo-provider.xml中注册中心的配置： 123&lt;!-- 使用multicast广播注册中心暴露服务地址 --&gt;&lt;!--&lt;dubbo:registry address="multicast://224.5.6.7:1234"/&gt;--&gt;&lt;dubbo:registry protocol="zookeeper" address="127.0.0.1:2181"/&gt; 同时修改dubbo-demo子项目的dubbo-demo-provider模块的test/resources/dubbo.properties文件中： 12#dubbo.registry.address=multicast://224.5.6.7:1234dubbo.registry.address=zookeeper://127.0.0.1:2181 需要外部下载启动zookeeper组件。 然后启动dubbo-demo-provider/test/java下的DemoProvider观察服务启动日志： 从Provider启动日志可以看到，主要做了6个发布动作： 1234561.暴露本地服务2.暴露远程服务3.启动Netty4.打开连接Zookeeper5.到zookeeper注册6.监听zookeeper 暴露的服务，其实就是dubbo-demo-provider.xml中配置的service： 12&lt;!-- 和本地bean一样实现服务 --&gt;&lt;dubbo:service interface="com.alibaba.dubbo.demo.DemoService" ref="demoService"/&gt; dubbo:service是在dubbo-config-spring下resources/META-INF下的dubbo.xsd约束schema文件中定义的。 而处理Handler在dubbo-config-spring下的schema包下的DubboNamespaceHandler.java中处理： 12345678910111213141516171819public class DubboNamespaceHandler extends NamespaceHandlerSupport &#123; static &#123; Version.checkDuplicate(DubboNamespaceHandler.class); &#125; public void init() &#123; registerBeanDefinitionParser("application", new DubboBeanDefinitionParser(ApplicationConfig.class, true)); registerBeanDefinitionParser("module", new DubboBeanDefinitionParser(ModuleConfig.class, true)); registerBeanDefinitionParser("registry", new DubboBeanDefinitionParser(RegistryConfig.class, true)); registerBeanDefinitionParser("monitor", new DubboBeanDefinitionParser(MonitorConfig.class, true)); registerBeanDefinitionParser("provider", new DubboBeanDefinitionParser(ProviderConfig.class, true)); registerBeanDefinitionParser("consumer", new DubboBeanDefinitionParser(ConsumerConfig.class, true)); registerBeanDefinitionParser("protocol", new DubboBeanDefinitionParser(ProtocolConfig.class, true)); registerBeanDefinitionParser("service", new DubboBeanDefinitionParser(ServiceBean.class, true)); registerBeanDefinitionParser("reference", new DubboBeanDefinitionParser(ReferenceBean.class, false)); registerBeanDefinitionParser("annotation", new DubboBeanDefinitionParser(AnnotationBean.class, true)); &#125;&#125; 可以看到，service标签对应的Bean为ServiceBean。看看ServiceBean类继承关系： 1public class ServiceBean&lt;T&gt; extends ServiceConfig&lt;T&gt; implements InitializingBean, DisposableBean, ApplicationContextAware, ApplicationListener, BeanNameAware 这里ServiceBean继承自ServiceConfig，并且实现了Spring框架的ApplicationListener接口。 123public interface ApplicationListener&lt;E extends ApplicationEvent&gt; extends EventListener &#123; void onApplicationEvent(E var1);&#125; 所以在Spring框架启动时，会去回调执行ServiceBean的onApplicationEvent(e)方法。 12345678910public void onApplicationEvent(ApplicationEvent event) &#123; if (ContextRefreshedEvent.class.getName().equals(event.getClass().getName())) &#123; if (isDelay() &amp;&amp; !isExported() &amp;&amp; !isUnexported()) &#123; if (logger.isInfoEnabled()) &#123; logger.info("The service ready on spring started. service: " + getInterface()); &#125; export(); &#125; &#125;&#125; 执行调用分析如下： 1234567ServiceBean.onApplicationEvent--&gt;export() --&gt;ServiceConfig.export() --&gt;doExport() --&gt;doExportUrls()//里面有一个for循环，代表了一个服务可以有多个通信协议，例如 tcp协议 http协议，默认是tcp协议 --&gt;loadRegistries(true)//从dubbo.properties里面组装registry的url信息：registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;dubbo=2.0.0&amp;owner=william&amp;pid=2752&amp;registry=zookeeper&amp;timestamp=1519438717974 --&gt;doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs) 这里分为本地暴露和远程暴露。那么暴露本地服务和暴露远程服务的区别是什么？ 1.暴露本地服务：指暴露在用一个JVM里面，不用通过调用zk来进行远程通信。例如：在同一个服务，自己调用自己的接口，就没必要进行网络IP连接来通信。 2.暴露远程服务：指暴露给远程客户端的IP和端口号，通过网络来实现通信。 本地暴露123456789101112131415161718192021//配置不是remote的情况下做本地暴露 (配置为remote，则表示只暴露远程服务) --&gt;exportLocal(URL url) //本地暴露 --&gt;proxyFactory.getInvoker(ref, (Class) interfaceClass, local) --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension("javassist"); --&gt;extension.getInvoker(arg0, arg1, arg2) --&gt;StubProxyFactoryWrapper.getInvoker(T proxy, Class&lt;T&gt; type, URL url) --&gt;proxyFactory.getInvoker(proxy, type, url) --&gt;JavassistProxyFactory.getInvoker(T proxy, Class&lt;T&gt; type, URL url) --&gt;Wrapper.getWrapper(com.alibaba.dubbo.demo.provider.DemoServiceImpl) --&gt;makeWrapper(Class&lt;?&gt; c) --&gt;return new AbstractProxyInvoker&lt;T&gt;(proxy, type, url) --&gt;protocol.export(Invoker&lt;T&gt; invoker) --&gt;Protocol$Adpative.export(Invoker&lt;T&gt; invoker) --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension("injvm"); --&gt;extension.export(arg0) //extension为ProtocolFilterWrapper --&gt;ProtocolFilterWrapper.export(Invoker&lt;T&gt; invoker) --&gt;ProtocolFilterWrapper.buildInvokerChain(final Invoker&lt;T&gt; invoker, String key, String group) //创建8个filter --&gt;ProtocolListenerWrapper.export(Invoker&lt;T&gt; invoker) --&gt;InjvmProtocol.export(Invoker&lt;T&gt; invoker) --&gt;return new InjvmExporter&lt;T&gt;(invoker, invoker.getUrl().getServiceKey(), exporterMap) --&gt;exporterMap.put(key, this)//key=com.alibaba.dubbo.demo.DemoService, this=InjvmExporter //这里也是上面整个代码的目的，为了把要暴露的对象存储在exporterMap里 （1）这里的proxyFactory是什么？ 1234567891011121314151617181920212223@SPI("javassist")public interface ProxyFactory &#123; /** * create proxy. * * @param invoker * @return proxy */ @Adaptive(&#123;Constants.PROXY_KEY&#125;) &lt;T&gt; T getProxy(Invoker&lt;T&gt; invoker) throws RpcException; /** * create invoker. * * @param &lt;T&gt; * @param proxy * @param type * @param url * @return invoker */ @Adaptive(&#123;Constants.PROXY_KEY&#125;) &lt;T&gt; Invoker&lt;T&gt; getInvoker(T proxy, Class&lt;T&gt; type, URL url) throws RpcException;&#125; 可以看出proxyFactory是一个代理，作用是获取一个接口的代理类，例如获取一个远程接口的代理。 getInvoker：针对server端，将服务对象，如DemoServiceImpl包装成一个Invoker对象。 getProxy：针对client端，创建接口的代理对象，例如DemoService的接口。 （2）上面还出现了Wrapper，这个又是做什么的？ 它类似spring的BeanWrapper，它就是包装了一个接口或一个类，可以通过wrapper对实例对象进行赋值、取值以及指定方法的调用。 （3）Invoker Invoker：它是一个可执行的对象，能够根据方法的名称、参数得到相应的执行结果。 12345678910111213它里面有一个很重要的方法 Result invoke(Invocation invocation)，Invocation是包含了需要执行的方法和参数等重要信息，目前它只有2个实现类RpcInvocation MockInvocation它有3种类型的Invoker 1.本地执行类的Invoker server端：要执行 demoService.sayHello，就通过InjvmExporter来进行反射执行demoService.sayHello就可以了。 2.远程通信类的Invoker client端：要执行 demoService.sayHello，它封装了DubboInvoker进行远程通信，发送要执行的接口给server端。 server端：采用了AbstractProxyInvoker执行了DemoServiceImpl.sayHello,然后将执行结果返回发送给client. 3.多个远程通信执行类的Invoker聚合成集群版的Invoker client端：要执行 demoService.sayHello，就要通过AbstractClusterInvoker来进行负载均衡，DubboInvoker进行远程通信，发送要执行的接口给server端。 server端：采用了AbstractProxyInvoker执行了DemoServiceImpl.sayHello,然后将执行结果返回发送给client. 远程暴露远程暴露过程中使用Netty进行通信。接着前面分析： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//如果配置不是local则暴露为远程服务.(配置为local，则表示只暴露本地服务) --&gt;proxyFactory.getInvoker//原理和本地暴露一样都是为了获取一个Invoker对象 --&gt;protocol.export(invoker) //invoker: "registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;dubbo=2.0.0&amp;export=dubbo%3A%2F%2F10.168.18.162%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider%26dubbo%3D2.0.0%26generic%3Dfalse%26interface%3Dcom.alibaba.dubbo.demo.DemoService%26loadbalance%3Droundrobin%26methods%3DsayHello%26owner%3Dwilliam%26pid%3D6948%26side%3Dprovider%26timestamp%3D1519691944112&amp;owner=william&amp;pid=6948&amp;registry=zookeeper&amp;timestamp=1519691944048" --&gt;Protocol$Adpative.export(invoker) --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension("registry"); --&gt;extension.export(arg0) --&gt;ProtocolFilterWrapper.export(Invoker&lt;T&gt; invoker) --&gt;ProtocolListenerWrapper.export(Invoker&lt;T&gt; invoker) --&gt;RegistryProtocol.export(final Invoker&lt;T&gt; originInvoker) --&gt;doLocalExport(final Invoker&lt;T&gt; originInvoker) --&gt;getCacheKey(originInvoker);//读取 dubbo://127.0.0.1:20880/ --&gt;protocol.export(invokerDelegete) --&gt;Protocol$Adpative.export(com.alibaba.dubbo.rpc.Invoker arg0) --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension("dubbo"); --&gt;extension.export(arg0) --&gt;ProtocolFilterWrapper.export(Invoker&lt;T&gt; invoker) --&gt;buildInvokerChain(invoker, Constants.SERVICE_FILTER_KEY, Constants.PROVIDER)//创建8个filter --&gt;ProtocolListenerWrapper.export(Invoker&lt;T&gt; invoker) --&gt;DubboProtocol.export(Invoker&lt;T&gt; invoker) //------------1.netty服务暴露的开始 --&gt;serviceKey(url)//组装key=com.alibaba.dubbo.demo.DemoService:20880 --&gt;目的：exporterMap.put(key, exporter); //key=com.alibaba.dubbo.demo.DemoService:20880, exporter=DubboExporter --&gt;openServer(url) --&gt;createServer(url) --&gt;Exchangers.bind(url, requestHandler)//------------2.信息交换层exchanger开始 --&gt;getExchanger(url) --&gt;getExchanger(type) --&gt;ExtensionLoader.getExtensionLoader(Exchanger.class).getExtension("header") --&gt;HeaderExchanger.bind(URL url, ExchangeHandler handler) --&gt;Transporters.bind(url, new DecodeHandler(new HeaderExchangeHandler(handler))) --&gt;new HeaderExchangeHandler(handler)//this.handler = handler --&gt;new DecodeHandler --&gt;new AbstractChannelHandlerDelegate//this.handler = handler; --&gt;Transporters.bind(URL url, ChannelHandler... handlers)//----3.网络传输层 transporter --&gt;getTransporter() --&gt;ExtensionLoader.getExtensionLoader(Transporter.class).getAdaptiveExtension() --&gt;Transporter$Adpative.bind --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension("netty"); --&gt;extension.bind(arg0, arg1) --&gt;NettyTransporter.bind(URL url, ChannelHandler listener) --new NettyServer(url, listener) --&gt;AbstractPeer //this.url = url; this.handler = handler; --&gt;AbstractEndpoint//codec timeout=1000 connectTimeout=3000 --&gt;AbstractServer //bindAddress accepts=0 idleTimeout=600000 --&gt;doOpen() //---------------4.打开连接，暴露netty服务 --&gt;设置 NioServerSocketChannelFactory boss worker的线程池 线程个数为3 --&gt;设置编解码 hander --&gt;bootstrap.bind(getBindAddress()) --&gt;new HeaderExchangeServer --&gt;this.server=NettyServer --&gt;heartbeat=60000 --&gt;heartbeatTimeout=180000 --&gt;startHeatbeatTimer()//这是一个心跳定时器，采用了线程池，如果断开就心跳重连。 ①Protocol 1.export：暴露远程服务（用于服务端），就是将proxyFactory.getInvoker创建的代理类 invoker对象，通过协议暴露给外部。 2.refer：引用远程服务（用于客户端）， 通过proxyFactory.getProxy来创建远程的动态代理类，例如DemoService的远程动态接口。 ②exporter：维护invoker的生命周期。 ③exchanger：信息交换层，封装请求响应模式，同步转异步。 ④transporter：网络传输层，用来抽象netty和mina的统一接口。 接着前面Netty分析之后，来分析Dubbo中的Zookeeper使用机制。 关注如下三个问题： ①dubbo如何连接zookeeper？ 123456789101112131415161718192021222324 --&gt;getRegistry(originInvoker)//连接zookeeper --&gt;registryFactory.getRegistry(registryUrl) --&gt;ExtensionLoader.getExtensionLoader(RegistryFactory.class).getExtension("zookeeper"); --&gt;extension.getRegistry(arg0) --&gt;AbstractRegistryFactory.getRegistry//创建一个注册中心，存储在REGISTRIES --&gt;createRegistry(url) --&gt;new ZookeeperRegistry(url, zookeeperTransporter) --&gt;AbstractRegistry(URL url) --&gt;loadProperties()//目的：把C:\Users\dongqiang\.dubbo\dubbo-registry-127.0.0.1.cache 文件中的内容加载为properties --&gt;notify(url.getBackupUrls())//不做任何事 --&gt;FailbackRegistry --&gt;retryExecutor.scheduleWithFixedDelay(new Runnable()//建立线程池，检测并连接注册中心,如果失败了就重连 --&gt;ZookeeperRegistry --&gt;zookeeperTransporter.connect(url) --&gt;ZookeeperTransporter$Adpative.connect(url) --&gt;ExtensionLoader.getExtensionLoader(ZookeeperTransporter.class).getExtension("zkclient"); --&gt;extension.connect(arg0) --&gt;ZkclientZookeeperTransporter.connect(URL url) --&gt;new ZkclientZookeeperClient(url) --&gt;调用super: AbstractZookeeperClient(URL url)--&gt;new ZkClient(url.getBackupAddress());//连接ZK --&gt;client.subscribeStateChanges(new IZkStateListener()//订阅的目的：连接断开时重连 --&gt;zkClient.addStateListener(new StateListener() --&gt;recover //连接失败时重连 ②dubbo如何创建zookeeper节点？ 123456789--&gt;registry.register(registedProviderUrl)//创建节点 --&gt;AbstractRegistry.register --&gt;FailbackRegistry.register --&gt;doRegister(url)//向zk服务器端发送注册请求 --&gt;ZookeeperRegistry.doRegister(URL url) --&gt;zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, true)) --&gt;AbstractZookeeperClient.create///dubbo/com.alibaba.dubbo.demo.DemoService/providers/dubbo%3A%2F%2F10.168.18.162%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider%26dubbo%3D2.0.0%26generic%3Dfalse%26interface%3Dcom.alibaba.dubbo.demo.DemoService%26loadbalance%3Droundrobin%26methods%3DsayHello%26owner%3Dwilliam%26pid%3D7832%26side%3Dprovider%26timestamp%3D1519804577146 --&gt;createEphemeral(path);//临时节点 dubbo%3A%2F%2F10.168.18.162%3A20880%2F............. --&gt;createPersistent(path);//持久化节点 dubbo/com.alibaba.dubbo.demo.DemoService/providers zk持久化节点和临时节点有什么区别？ 持久化节点：一旦被创建，除非主动删除掉，否则就一直存储在zk里面。 临时节点：与客户端会话绑定，一旦客户端会话失效，这个客户端端所创建的所有临时节点都会被删除。Dubbo对注册的服务使用临时节点，保证服务断掉时节点自动被移除，以免订阅者一直订阅。比如服务端已经挂了，但是在Zk中仍然存在，那么客户端还是会去请求和监听，那么会一直失败。 ③dubbo如何订阅zookeeper信息？ 123456789101112131415161718192021222324 --&gt;registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);//订阅ZK --&gt;AbstractRegistry.subscribe --&gt;FailbackRegistry.subscribe --&gt;doSubscribe(url, listener)// 向服务器端发送订阅请求 --&gt;ZookeeperRegistry.doSubscribe(final URL url, final NotifyListener listener) --&gt;new ChildListener() &#123;--&gt;实现childChanged(String parentPath, List&lt;String&gt; currentChilds) --&gt;实现并执行ZookeeperRegistry.this.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds)); //A --&gt;zkClient.create(path, false);//第一步：先创建持久化节点/dubbo/com.alibaba.dubbo.demo.DemoService/configurators --&gt;zkClient.addChildListener(path, zkListener) --&gt;AbstractZookeeperClient.addChildListener(path, listener) //C --&gt;createTargetChildListener(path, listener)//第三步：收到订阅后的处理，交给FailbackRegistry.notify处理 --&gt;ZkclientZookeeperClient.createTargetChildListener(String path, final ChildListener listener) --&gt;new IZkChildListener() --&gt;实现了 handleChildChange //收到订阅后的处理 --&gt;listener.childChanged(parentPath, currentChilds); --&gt;实现并执行ZookeeperRegistry.this.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds)); --&gt;收到订阅后处理 FailbackRegistry.notify //B --&gt;addTargetChildListener(path, targetListener)////第二步 --&gt;ZkclientZookeeperClient.addTargetChildListener --&gt;client.subscribeChildChanges(path, listener)//第二步：启动加入订阅/dubbo/com.alibaba.dubbo.demo.DemoService/configurators 最后再跟一下notify的处理流程： 123456789--&gt;notify(url, listener, urls) --&gt;FailbackRegistry.notify --&gt;doNotify(url, listener, urls); --&gt;AbstractRegistry.notify --&gt;saveProperties(url);//把服务端的注册url信息更新到C:\Users\dongqiang\.dubbo\dubbo-registry-192.168.48.117.cache --&gt;registryCacheExecutor.execute(new SaveProperties(version));//采用线程池来处理 --&gt;listener.notify(categoryList) --&gt;RegistryProtocol.notify --&gt;RegistryProtocol.this.getProviderUrl(originInvoker)//通过invoker的url 获取 providerUrl的地址 整个服务发布流程如下：]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dubbo的动态编译]]></title>
    <url>%2F2018%2F10%2F02%2FDubbo%E7%9A%84%E5%8A%A8%E6%80%81%E7%BC%96%E8%AF%91%2F</url>
    <content type="text"><![CDATA[前面分析SPI机制时，提到createAdaptiveExtensionClass()自动生成和编译一个动态的adpative类。 Compiler的类继承关系： 在Dubbo实现中，默认使用JavassistCompiler进行动态编译，不使用JdKComplier。这一点从Compiler接口的实现中可以看出。 123456789101112@SPI("javassist")public interface Compiler &#123; /** * Compile java source code. * * @param code Java source code * @param classLoader TODO * @return Compiled class */ Class&lt;?&gt; compile(String code, ClassLoader classLoader);&#125; 可以看到，这里使用了@SPI注解，指定了使用javassist。 回顾前面的调用流程： 123456789--&gt;createAdaptiveExtensionClass() --&gt;createAdaptiveExtensionClassCode() --&gt;com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension(); --&gt;compiler.compile(code, classLoader) --&gt;AdaptiveCompiler.compile(code, classLoader) --&gt;AbstractCompiler.compile(code, classLoader) --&gt;Class&lt;?&gt; doCompile(String name, String source) --&gt;JavassistCompiler.doCompile(String name, String source) --&gt;cls.toClass(ClassHelper.getCallerClassLoader(getClass()), JavassistCompiler.class.getProtectionDomain());//编译成class返回 根据前面分析SPI机制时得出的结论： 123getExtensionLoader(Class&lt;T&gt; type) 就是为该接口new 一个ExtensionLoader，然后缓存起来。getAdaptiveExtension() 获取一个扩展类，如果@Adaptive注解在类上就是一个装饰类；如果注解在方法上就是一个动态代理类，例如Protocol$Adaptive对象。getExtension(String name) 获取一个指定对象。 这里首先为Compiler接口创建了一个ExtensionLoader。然后调用getAdaptiveExtension()获取扩展类。那么这个Compiler是一个装饰类还是一个动态代理类？从上面的Compiler接口的定义并不能看出，跟进compile()方法来看: 12@Adaptivepublic class AdaptiveCompiler implements Compiler 所以Compiler是一个装饰类。 接着看createAdaptiveExtensionClass()具体实现： 123456private Class&lt;?&gt; createAdaptiveExtensionClass() &#123; String code = createAdaptiveExtensionClassCode(); ClassLoader classLoader = findClassLoader(); com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension(); return compiler.compile(code, classLoader);&#125; 这里会执行到AdaptiveCompiler的实现： 123456789101112131415161718192021@Adaptivepublic class AdaptiveCompiler implements Compiler &#123; private static volatile String DEFAULT_COMPILER; public static void setDefaultCompiler(String compiler) &#123; DEFAULT_COMPILER = compiler; &#125; public Class&lt;?&gt; compile(String code, ClassLoader classLoader) &#123; Compiler compiler; ExtensionLoader&lt;Compiler&gt; loader = ExtensionLoader.getExtensionLoader(Compiler.class); String name = DEFAULT_COMPILER; // copy reference if (name != null &amp;&amp; name.length() &gt; 0) &#123; compiler = loader.getExtension(name); &#125; else &#123; compiler = loader.getDefaultExtension(); &#125; return compiler.compile(code, classLoader); &#125;&#125; 这里DEFAULT_COMPILER执行compile时并未赋值，所以会执行else分支，这里最终会根据@SPI(“javassist”)获取JavassistCompiler。然后使用其compile()进行编译code，这里会调用到抽象类AbstractCompiler的实现： 123456789101112131415161718192021222324252627282930313233343536373839404142public abstract class AbstractCompiler implements Compiler &#123; private static final Pattern PACKAGE_PATTERN = Pattern.compile("package\\s+([$_a-zA-Z][$_a-zA-Z0-9\\.]*);"); private static final Pattern CLASS_PATTERN = Pattern.compile("class\\s+([$_a-zA-Z][$_a-zA-Z0-9]*)\\s+"); public Class&lt;?&gt; compile(String code, ClassLoader classLoader) &#123; code = code.trim(); Matcher matcher = PACKAGE_PATTERN.matcher(code); String pkg; if (matcher.find()) &#123; pkg = matcher.group(1); &#125; else &#123; pkg = ""; &#125; matcher = CLASS_PATTERN.matcher(code); String cls; if (matcher.find()) &#123; cls = matcher.group(1); &#125; else &#123; throw new IllegalArgumentException("No such class name in " + code); &#125; String className = pkg != null &amp;&amp; pkg.length() &gt; 0 ? pkg + "." + cls : cls; try &#123; return Class.forName(className, true, ClassHelper.getCallerClassLoader(getClass())); &#125; catch (ClassNotFoundException e) &#123; if (!code.endsWith("&#125;")) &#123; throw new IllegalStateException("The java code not endsWith \"&#125;\", code: \n" + code + "\n"); &#125; try &#123; return doCompile(className, code); &#125; catch (RuntimeException t) &#123; throw t; &#125; catch (Throwable t) &#123; throw new IllegalStateException("Failed to compile class, cause: " + t.getMessage() + ", class: " + className + ", code: \n" + code + "\n, stack: " + ClassUtils.toString(t)); &#125; &#125; &#125; protected abstract Class&lt;?&gt; doCompile(String name, String source) throws Throwable;&#125; 在上述代码中首先会去使用类加载器Class.forName去加载目标类，如果类本身（如动态代理类$Adaptive）不存在则会走到异常处理代码，doCompile()这里会调用到JavassistCompiler的具体实现。 在该类中最后会返回编译的class： 1cls.toClass(ClassHelper.getCallerClassLoader(getClass()), JavassistCompiler.class.getProtectionDomain());]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dubbo之Spi机制分析]]></title>
    <url>%2F2018%2F10%2F02%2FDubbo%E4%B9%8BSpi%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[一、Dubbo内核Dubbo内核主要包含SPI、AOP、IOC、Compiler。 二、JDK的SPI1.spi的设计目标： 面向对象的设计里，模块之间是基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可插拔的原则，如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候，不在模块里写死代码，就需要一种服务发现机制。Java SPI就提供了这样一种机制：为某个接口寻找服务实现，有点类似IOC思想，将装配的控制权移到代码之外。 2.JDK的SPI的默认约定 当服务的提供者提供了一个接口的多种实现时，一般会在jar包的META-INF/services目录下，创建该接口的同名文件，文件的内容就是该服务接口的具体实现类的全类名。 三、Dubbo为什么不采用JDK的SPIJDK标准的SPI会一次性实例化扩展点所有实现，如果有扩展实现初始化很耗时。但如果没用上也加载，会很浪费资源。针对这个问题，Dubbo增加了对扩展点IoC和AOP的支持，一个扩展点可以直接setter注入其它扩展点。 四、Dubbo SPI的默认约定1.spi 文件存储路径在META-INF\dubbo\internal 目录下并且文件名为接口的全路径名。即接口文件的全类名。 2.每个spi 文件里面的格式定义为： 扩展名=具体的类名，例如 dubbo=com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtoco。使用时通过key加载（如dubbo），可以实现部分加载。 五、SPI示例遵循上述第一条第2点，这里Command为接口文件，其中StartCommand和ShutdownCommand为两个实现类。需要在resources目录下建META-INF子目录，在META-INF下建services目录，然后以接口全路径作为文件名创建文件，内容为接口实现类的全类型名。 Command.java 1234567package com.dongqiang.soa.spi;/** * Created by qiangdong on 2018/2/2. */public interface Command &#123; void execute();&#125; StartCommand.java 12345678910package com.dongqiang.soa.spi;/** * Created by qiangdong on 2018/2/2. */public class StartCommand implements Command &#123;@Override public void execute() &#123; System.out.println("start command."); &#125;&#125; ShutdownCommand.java 1234567891011package com.dongqiang.soa.spi;/** * Created by qiangdong on 2018/2/2. */public class ShutdownCommand implements Command &#123; @Override public void execute() &#123; System.out.println("ShutdownCommand"); &#125;&#125; Main类： 12345678910111213141516package com.dongqiang.soa.spi;import java.util.ServiceLoader;/** * Created by qiangdong on 2018/2/2. */public class Main &#123; public static void main(String[] args) &#123; ServiceLoader&lt;Command&gt; serviceLoader = ServiceLoader.load(Command.class); for (Command command : serviceLoader) &#123; command.execute(); &#125; &#125;&#125; 六、结合Dubbo源码分析Spi如前所说，Dubbo SPI的目的是获取一个指定实现类的对象。那么Dubbo是通过什么方式获取的呢？其实是调用ExtensionLoader.getExtension(String name)实现。 具体实现途径有三种： ①getExtensionLoader(Class type) 为type接口new一个ExtensionLoader，然后缓存起来。 ②getAdaptiveExtension() 获取一个扩展装饰类的对象，这个类有一个规则，如果它没有@Adaptive注解，就动态创建一个装饰类，例如Protocol$Adaptive对象。 ③getExtension(String name) 获取一个指定对象。 （1）分析ExtensionLoader.getExtensionLoader(Class type) Dubbo的第一行代码在哪里？ idea导入Dubbo源码，在子模块dubbo-demo-provider/src/test下有DemoProvider.java 12345678package com.alibaba.dubbo.demo.provider;public class DemoProvider &#123; public static void main(String[] args) &#123; com.alibaba.dubbo.container.Main.main(args); &#125;&#125; 这里便是代码的入口。 这里调到com.alibaba.dubbo.container.Main.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384package com.alibaba.dubbo.container;import com.alibaba.dubbo.common.Constants;import com.alibaba.dubbo.common.extension.ExtensionLoader;import com.alibaba.dubbo.common.logger.Logger;import com.alibaba.dubbo.common.logger.LoggerFactory;import com.alibaba.dubbo.common.utils.ConfigUtils;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import java.util.List;/** * Main. (API, Static, ThreadSafe) * * @author william.liangf */public class Main &#123; public static final String CONTAINER_KEY = "dubbo.container"; public static final String SHUTDOWN_HOOK_KEY = "dubbo.shutdown.hook"; private static final Logger logger = LoggerFactory.getLogger(Main.class); private static final ExtensionLoader&lt;Container&gt; loader = ExtensionLoader.getExtensionLoader(Container.class); private static volatile boolean running = true; public static void main(String[] args) &#123; try &#123; if (args == null || args.length == 0) &#123; String config = ConfigUtils.getProperty(CONTAINER_KEY, loader.getDefaultExtensionName()); args = Constants.COMMA_SPLIT_PATTERN.split(config); &#125; final List&lt;Container&gt; containers = new ArrayList&lt;Container&gt;(); for (int i = 0; i &lt; args.length; i++) &#123; containers.add(loader.getExtension(args[i])); &#125; logger.info("Use container type(" + Arrays.toString(args) + ") to run dubbo serivce."); if ("true".equals(System.getProperty(SHUTDOWN_HOOK_KEY))) &#123; Runtime.getRuntime().addShutdownHook(new Thread() &#123; public void run() &#123; for (Container container : containers) &#123; try &#123; container.stop(); logger.info("Dubbo " + container.getClass().getSimpleName() + " stopped!"); &#125; catch (Throwable t) &#123; logger.error(t.getMessage(), t); &#125; synchronized (Main.class) &#123; running = false; Main.class.notify(); &#125; &#125; &#125; &#125;); &#125; for (Container container : containers) &#123; container.start(); logger.info("Dubbo " + container.getClass().getSimpleName() + " started!"); &#125; System.out.println(new SimpleDateFormat("[yyyy-MM-dd HH:mm:ss]").format(new Date()) + " Dubbo service server started!"); &#125; catch (RuntimeException e) &#123; e.printStackTrace(); logger.error(e.getMessage(), e); System.exit(1); &#125; synchronized (Main.class) &#123; while (running) &#123; try &#123; Main.class.wait(); &#125; catch (Throwable e) &#123; &#125; &#125; &#125; &#125;&#125; 可以看到，Main类中定义了一系列的静态成员变量，其中： 1private static final ExtensionLoader&lt;Container&gt; loader = ExtensionLoader.getExtensionLoader(Container.class); 在Main类初始化阶段调用了上述第①条方式为Container创建扩展点。 通过断点跟进getExtensionLoader方法，会进行new ExtensionLoader(type)构造： 1234private ExtensionLoader(Class&lt;?&gt; type) &#123; this.type = type; objectFactory = (type == ExtensionFactory.class ? null : ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension()); &#125; 可以看到，这里会进一步调用getExtensionLoader方法，只是这次传入的是ExtensionFactory.class。通过上面的代码知道，等价于如下： 12this.type = type;objectFactory = null; 执行以上代码完成了2个属性的初始化： 1.每个ExtensionLoader都包含了2个值： type 和 objectFactory Class&lt;?&gt; type；//构造器初始化时要得到的接口名 ExtensionFactory objectFactory//构造器初始化时设置为AdaptiveExtensionFactory，Dubbo内部默认的实现是SpiExtensionFactory和SpringExtensionFactory。 2.new 一个ExtensionLoader 存储在ConcurrentMap&lt;Class&lt;?&gt;, ExtensionLoader&lt;?&gt;&gt; EXTENSION_LOADERS里。 关于objectFactory 1.objectFactory就是ExtensionFactory，它也是通过ExtensionLoader.getExtensionLoader(ExtensionFactory.class)来实现的，但是它的objectFactory=null 2.objectFactory作用，它就是为dubbo的IOC提供所有对象。 （2）分析getAdaptiveExtension() 为什么要设计Adaptive？ Adaptive注解在类和方法上有什么区别？ ①注解在类上，代表人工实现编码，即实现了一个装饰类，如ExtensionFactory。 ②注解在方法上，代表自动生成和编译一个动态的adaptive类，如Protocol$Adaptive。 接下来从子模块dubbo-config-spring下的schema包的DubboNamespaceHandler开始分析： 1234567891011121314151617181920212223242526272829303132333435363738394041package com.alibaba.dubbo.config.spring.schema;import com.alibaba.dubbo.common.Version;import com.alibaba.dubbo.config.ApplicationConfig;import com.alibaba.dubbo.config.ConsumerConfig;import com.alibaba.dubbo.config.ModuleConfig;import com.alibaba.dubbo.config.MonitorConfig;import com.alibaba.dubbo.config.ProtocolConfig;import com.alibaba.dubbo.config.ProviderConfig;import com.alibaba.dubbo.config.RegistryConfig;import com.alibaba.dubbo.config.spring.AnnotationBean;import com.alibaba.dubbo.config.spring.ReferenceBean;import com.alibaba.dubbo.config.spring.ServiceBean;import org.springframework.beans.factory.xml.NamespaceHandlerSupport;/** * DubboNamespaceHandler * * @author william.liangf * @export */public class DubboNamespaceHandler extends NamespaceHandlerSupport &#123; static &#123; Version.checkDuplicate(DubboNamespaceHandler.class); &#125; public void init() &#123; registerBeanDefinitionParser("application", new DubboBeanDefinitionParser(ApplicationConfig.class, true)); registerBeanDefinitionParser("module", new DubboBeanDefinitionParser(ModuleConfig.class, true)); registerBeanDefinitionParser("registry", new DubboBeanDefinitionParser(RegistryConfig.class, true)); registerBeanDefinitionParser("monitor", new DubboBeanDefinitionParser(MonitorConfig.class, true)); registerBeanDefinitionParser("provider", new DubboBeanDefinitionParser(ProviderConfig.class, true)); registerBeanDefinitionParser("consumer", new DubboBeanDefinitionParser(ConsumerConfig.class, true)); registerBeanDefinitionParser("protocol", new DubboBeanDefinitionParser(ProtocolConfig.class, true)); registerBeanDefinitionParser("service", new DubboBeanDefinitionParser(ServiceBean.class, true)); registerBeanDefinitionParser("reference", new DubboBeanDefinitionParser(ReferenceBean.class, false)); registerBeanDefinitionParser("annotation", new DubboBeanDefinitionParser(AnnotationBean.class, true)); &#125;&#125; 先来看 1registerBeanDefinitionParser("service", new DubboBeanDefinitionParser(ServiceBean.class, true)); 这里ServiceBean继承自ServiceConfig类。 123456789public class ServiceConfig&lt;T&gt; extends AbstractServiceConfig &#123; private static final long serialVersionUID = 3033787999037024738L; private static final Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension(); private static final ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();....&#125; 在这里通过getAdaptiveExtension()获取protocol。 1234567891011--&gt;getAdaptiveExtension()//为cachedAdaptiveInstance赋值 --&gt;createAdaptiveExtension() --&gt;getAdaptiveExtensionClass()//该方法看出，如果是预定义的类就直接返回，不然动态生成适配类 --&gt;getExtensionClasses()//为cachedClasses 赋值 --&gt;loadExtensionClasses() --&gt;loadFile(..) --&gt;createAdaptiveExtensionClass()//自动生成和编译一个动态的adpative类，这个类是一个代理类 --&gt;ExtensionLoader.getExtensionLoader (com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension() --&gt;compiler.compile(code, classLoader) --&gt;injectExtension()//作用：进入IOC的反转控制模式，实现了动态注入 loadFile(..)方法的作用：把SPI配置文件（如META-INF/dubbo/internal/com.alibaba.dubbo.rpc.Protocol）的内容，存储在缓存变量里。使用了四个缓存变量。 ①缓存包含Adaptive注解的类 cachedAdaptiveClass 如果这个Class含有adaptive注解就赋值进去，如ExtensionFactory有，而Protocol没有。 ②缓存无Adaptive注解的封装类 cachedWrapperClasses 只有当该class无adaptive注解，并且构造方法参数为目标接口(type，如Protocol)类型，如Protocol里的SPI就只有ProtocolFilterWrapper和ProtocolListenerWrapper能命中，如下例： 123456789101112public class ProtocolFilterWrapper implements Protocol &#123; private final Protocol protocol; public ProtocolFilterWrapper(Protocol protocol) &#123; if (protocol == null) &#123; throw new IllegalArgumentException("protocol == null"); &#125; this.protocol = protocol; &#125; 。。。&#125; ③cachedActivates 剩下的包含Activate注解的类 ④cachedName 剩下的类存储在该map中 在loadExtensionClasses()方法中，有三处loadFile()加载SPI文件： 1234567891011121314151617181920private Map&lt;String, Class&lt;?&gt;&gt; loadExtensionClasses() &#123; final SPI defaultAnnotation = type.getAnnotation(SPI.class); if (defaultAnnotation != null) &#123; String value = defaultAnnotation.value(); if (value != null &amp;&amp; (value = value.trim()).length() &gt; 0) &#123; String[] names = NAME_SEPARATOR.split(value); if (names.length &gt; 1) &#123; throw new IllegalStateException("more than 1 default extension name on extension " + type.getName() + ": " + Arrays.toString(names)); &#125; if (names.length == 1) cachedDefaultName = names[0]; &#125; &#125; Map&lt;String, Class&lt;?&gt;&gt; extensionClasses = new HashMap&lt;String, Class&lt;?&gt;&gt;(); loadFile(extensionClasses, DUBBO_INTERNAL_DIRECTORY); loadFile(extensionClasses, DUBBO_DIRECTORY); loadFile(extensionClasses, SERVICES_DIRECTORY); return extensionClasses; &#125; 这里的三处loadFile()实际上起到真正作用的是第一个：路径为META-INF/dubbo/internal/，这个打开dubbo.jar即可看到，这里仍然看com.alibaba.dubbo.rpc.Protocol这个SPI文件： 12345678910111213registry=com.alibaba.dubbo.registry.integration.RegistryProtocoldubbo=com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocolfilter=com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapperlistener=com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrappermock=com.alibaba.dubbo.rpc.support.MockProtocolinjvm=com.alibaba.dubbo.rpc.protocol.injvm.InjvmProtocolrmi=com.alibaba.dubbo.rpc.protocol.rmi.RmiProtocolhessian=com.alibaba.dubbo.rpc.protocol.hessian.HessianProtocolcom.alibaba.dubbo.rpc.protocol.http.HttpProtocolcom.alibaba.dubbo.rpc.protocol.webservice.WebServiceProtocolthrift=com.alibaba.dubbo.rpc.protocol.thrift.ThriftProtocolmemcached=com.alibaba.dubbo.rpc.protocol.memcached.MemcachedProtocolredis=com.alibaba.dubbo.rpc.protocol.redis.RedisProtocol 上面执行compile时，框架会自动生成如下Protocol$Adpative类代码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com.alibaba.dubbo.rpc;import com.alibaba.dubbo.common.extension.ExtensionLoader;public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol &#123; public void destroy() &#123; throw new UnsupportedOperationException( "method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!"); &#125; public int getDefaultPort() &#123; throw new UnsupportedOperationException( "method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!"); &#125; public com.alibaba.dubbo.rpc.Exporter export( com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.RpcException &#123; if (arg0 == null) throw new IllegalArgumentException( "com.alibaba.dubbo.rpc.Invoker argument == null"); if (arg0.getUrl() == null) throw new IllegalArgumentException( "com.alibaba.dubbo.rpc.Invoker argument getUrl() == null"); com.alibaba.dubbo.common.URL url = arg0.getUrl(); String extName = (url.getProtocol() == null ? "dubbo" : url .getProtocol()); if (extName == null) throw new IllegalStateException( "Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])"); com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader .getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class) .getExtension(extName); return extension.export(arg0);//自己执行自己，说明当前类是一个代理类 &#125; public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws com.alibaba.dubbo.rpc.RpcException &#123; if (arg1 == null) throw new IllegalArgumentException("url == null"); com.alibaba.dubbo.common.URL url = arg1; String extName = (url.getProtocol() == null ? "dubbo" : url .getProtocol()); if (extName == null) throw new IllegalStateException( "Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])"); com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader .getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class) .getExtension(extName); return extension.refer(arg0, arg1);//自己执行自己，说明当前类是一个代理类 &#125;&#125; 其实就是根据如下模板生成的： 12345678910111213141516171819202122package &lt;扩展点接口所在包&gt;; public class &lt;扩展点接口名&gt;$Adpative implements &lt;扩展点接口&gt; &#123; public &lt;有@Adaptive注解的接口方法&gt;(&lt;方法参数&gt;) &#123; if(是否有URL类型方法参数?) 使用该URL参数 else if(是否有方法类型上有URL属性) 使用该URL属性 # &lt;else 在加载扩展点生成自适应扩展点类时抛异常，即加载扩展点失败！&gt; if(获取的URL == null) &#123; throw new IllegalArgumentException("url == null"); &#125; 根据@Adaptive注解上声明的Key的顺序，从URL获致Value，作为实际扩展点名。 如URL没有Value，则使用缺省扩展点实现。如没有扩展点， throw new IllegalStateException("Fail to get extension"); 在扩展点实现调用该方法，并返回结果。 &#125; public &lt;有@Adaptive注解的接口方法&gt;(&lt;方法参数&gt;) &#123; throw new UnsupportedOperationException("is not adaptive method!"); &#125;&#125; 总结起来，Dubbo的所有对象都是通过ExtensionLoader获取的，SPI是内核。 （3）分析getExtension(String name) 为了进一步分析代理类的扩展类对象生成过程，将Protocol$Adpative类手动创建到dubbo源码子模块dubbo-demo下的dubbo-demo-provider中，test目录下新建包com.alibaba.dubbo.rpc。然后将上述代码拷贝其中。 然后在getExtension(extName)这里设置断点： 通过断点跟踪，调用链如下： 1234567891011--&gt;getExtension(String name) //指定对象缓存在cachedInstances；get出来的对象可能是wrapper对象，例如protocol就是ProtocolFilterWrapper和ProtocolListenerWrapper其中一个。 --&gt;createExtension(String name) --&gt;getExtensionClasses() //前面已经分析过，就是使用loadFile读取文件并缓存 --&gt;injectExtension(T instance)//dubbo的IOC反转控制，就是从spi和spring里面提取对象赋值。 --&gt;objectFactory.getExtension(pt, property)//通过ExtensionFactory获取extension，有两种 --&gt;①SpiExtensionFactory.getExtension(type, name) --&gt;ExtensionLoader.getExtensionLoader(type) --&gt;loader.getAdaptiveExtension() --&gt;②SpringExtensionFactory.getExtension(type, name) --&gt;context.getBean(name) --&gt;injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance))//AOP的简单设计，这个地方如果前面的wrapperClasses缓存不空，那么就会执行这句代码，如Protocol中只有Filter和Listener，通过使用ProtocolFilterWrapper或ProtocolListenerWrapper的构造方法反射然后注入 通过上述分析，总结起来SPI getExtension()的执行流程及设计模式如下：]]></content>
      <categories>
        <category>Dubbo</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
</search>
