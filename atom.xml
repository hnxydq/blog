<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>闲来偶记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hnxydq.github.io/"/>
  <updated>2018-10-06T14:33:35.197Z</updated>
  <id>https://hnxydq.github.io/</id>
  
  <author>
    <name>hnxydq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dubbo网络通信-编解码</title>
    <link href="https://hnxydq.github.io/2018/10/06/Dubbo%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E7%BC%96%E8%A7%A3%E7%A0%81/"/>
    <id>https://hnxydq.github.io/2018/10/06/Dubbo网络通信编解码/</id>
    <published>2018-10-06T14:00:34.000Z</published>
    <updated>2018-10-06T14:33:35.197Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Dubbo远程通讯协议头定义"><a href="#Dubbo远程通讯协议头定义" class="headerlink" title="Dubbo远程通讯协议头定义"></a>Dubbo远程通讯协议头定义</h3><p><img src="/2018/10/06/Dubbo网络通信编解码/dubbo_protocol_header.jpg" alt="dubbo_protocol_header"></p><p><strong>1.为什么Dubbo要自己增加协议扩展？</strong></p><p>—-为了解决TCP/IP粘包和拆包的问题。</p><p>所谓粘包和拆包，就是一个完整的业务数据可能会被TCP拆分成多个包进行发送，也有可能把多个小的包封装成一个大的数据包发送。 </p><p><strong>2.TCP为什么会出现粘包与拆包？</strong></p><p>TCP是以流动的方式传输数据，传输的最小单位为一个报文段（segment）。Tcp Header中有个Options标识位，常见的标识为mss(Maximum Segment Size)指的是，连接层每次传输的数据有个最大限制MTU(Maximum Transmission Unit)，一般是1500比特，超过这个量要分成多个报文段，mss则是这个最大限制减去TCP的header，光是要传输的数据的大小，一般为1460比特。换算成字节，也就是180多字节。</p><p>TCP为提高性能，发送端会将需要发送的数据发送到缓冲区，等待缓冲区满了之后，再将缓冲中的数据发送到接收方。同理，接收方也有缓冲区这样的机制，来接收数据。</p><p>发生TCP粘包、拆包主要是由于下面一些原因：</p><p>①应用程序写入的数据大于套接字缓冲区大小，这将会发生拆包。</p><p>②应用程序写入数据小于套接字缓冲区大小，网卡将应用多次写入的数据发送到网络上，这将会发生粘包。</p><p>③进行mss（最大报文长度）大小的TCP分段，当TCP报文长度-TCP头部长度&gt;mss的时候将发生拆包。</p><p>④接收方法不及时读取套接字缓冲区数据，这将发生粘包。</p><p><strong>3.如何解决拆包粘包</strong></p><p>既然知道了tcp是无界的数据流，且协议本身无法避免粘包，拆包的发生，那我们只能在应用层数据协议上，加以控制。通常在制定传输数据时，可以使用如下方法：</p><ul><li>使用带消息头的协议、消息头存储消息开始标识及消息长度信息，服务端获取消息头的时候解析出消息长度，然后向后读取该长度的内容。</li><li>设置定长消息，服务端每次读取既定长度的内容作为一条完整消息。</li><li>设置消息边界，服务端从网络流中按消息编辑分离出消息内容，如在包尾增加回车或者空格等特殊字符作为分割，典型如FTP。</li></ul><h3 id="Consumer请求编码"><a href="#Consumer请求编码" class="headerlink" title="Consumer请求编码"></a>Consumer请求编码</h3><p>通过断点跟踪Consumer请求编码过程：</p><p>运行dubbo-demo-consumer工程，在dubbo-remoting-netty工程NettyCodecAdapter.java内部类InternalEncoder#encode()断点codec.encode(channel, buffer, msg);：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Sharable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalEncoder</span> <span class="keyword">extends</span> <span class="title">OneToOneEncoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Object <span class="title">encode</span><span class="params">(ChannelHandlerContext ctx, Channel ch, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            com.alibaba.dubbo.remoting.buffer.ChannelBuffer buffer =</span><br><span class="line">                    com.alibaba.dubbo.remoting.buffer.ChannelBuffers.dynamicBuffer(<span class="number">1024</span>);</span><br><span class="line">            NettyChannel channel = NettyChannel.getOrAddChannel(ch, url, handler);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                codec.encode(channel, buffer, msg);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                NettyChannel.removeChannelIfDisconnected(ch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ChannelBuffers.wrappedBuffer(buffer.toByteBuffer());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接下来跟踪调用层次：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--&gt;NettyCodecAdapter.InternalEncoder.encode</span><br><span class="line">  --&gt;DubboCountCodec.encode</span><br><span class="line">    --&gt;ExchangeCodec.encode</span><br><span class="line">      --&gt;ExchangeCodec.encodeRequest</span><br><span class="line">        --&gt;ExchangeCodec.encodeRequestData</span><br><span class="line">          --&gt;DubboCodec.encodeRequestData</span><br><span class="line">            通过默认的Hessian2ObjectOutput将RpcInvocation数据写入序列化buffer，最终由netty发送。</span><br></pre></td></tr></table></figure><p>需要关注请求端编码过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encodeRequest</span><span class="params">(Channel channel, ChannelBuffer buffer, Request req)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Serialization serialization = getSerialization(channel);</span><br><span class="line">        <span class="comment">// header.</span></span><br><span class="line">        <span class="keyword">byte</span>[] header = <span class="keyword">new</span> <span class="keyword">byte</span>[HEADER_LENGTH];</span><br><span class="line">        <span class="comment">// set magic number.</span></span><br><span class="line">        Bytes.short2bytes(MAGIC, header);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set request and serialization flag.</span></span><br><span class="line">        header[<span class="number">2</span>] = (<span class="keyword">byte</span>) (FLAG_REQUEST | serialization.getContentTypeId());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (req.isTwoWay()) header[<span class="number">2</span>] |= FLAG_TWOWAY;</span><br><span class="line">        <span class="keyword">if</span> (req.isEvent()) header[<span class="number">2</span>] |= FLAG_EVENT;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set request id.</span></span><br><span class="line">        Bytes.long2bytes(req.getId(), header, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// encode request data.</span></span><br><span class="line">        <span class="keyword">int</span> savedWriteIndex = buffer.writerIndex();</span><br><span class="line">        buffer.writerIndex(savedWriteIndex + HEADER_LENGTH);</span><br><span class="line">        ChannelBufferOutputStream bos = <span class="keyword">new</span> ChannelBufferOutputStream(buffer);</span><br><span class="line">        ObjectOutput out = serialization.serialize(channel.getUrl(), bos);</span><br><span class="line">        <span class="keyword">if</span> (req.isEvent()) &#123;</span><br><span class="line">            encodeEventData(channel, out, req.getData());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            encodeRequestData(channel, out, req.getData());</span><br><span class="line">        &#125;</span><br><span class="line">        out.flushBuffer();</span><br><span class="line">        <span class="keyword">if</span> (out <span class="keyword">instanceof</span> Cleanable) &#123;</span><br><span class="line">            ((Cleanable) out).cleanup();</span><br><span class="line">        &#125;</span><br><span class="line">        bos.flush();</span><br><span class="line">        bos.close();</span><br><span class="line">        <span class="keyword">int</span> len = bos.writtenBytes();</span><br><span class="line">        checkPayload(channel, len);</span><br><span class="line">        Bytes.int2bytes(len, header, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// write</span></span><br><span class="line">        buffer.writerIndex(savedWriteIndex);</span><br><span class="line">        buffer.writeBytes(header); <span class="comment">// write header.</span></span><br><span class="line">        buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这段代码对应的是前面那张图，Dubbo自己扩展了16字节头部。根据上述代码，可以看到，魔数占用2字节，第三个字节，存储FLAG_REQUEST与序列化器id（如Hessian2Serialization类定义的ID=2，DubboSerialization的id为1，源码可查）以及是FLAG_TWOWAY（双向）还是FLAG_EVENT（单向）。在请求端编码时，未使用第四字节。第5-12共8个字节，用于存储异步变同步的全局唯一ID。第13-16个字节为消息体总长度（消息头+请求数据）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dubbo的消息头是一个定长的 16个字节数据。</span><br><span class="line">第1-2个字节：魔数, 一个固定的数字 </span><br><span class="line">第3个字节：是双向(有去有回) 或单向（有去无回）的标记 </span><br><span class="line">第四个字节：？？？ （request 没有第四个字节）</span><br><span class="line">第5-12个字节：请求id：long型8个字节。异步变同步的全局唯一ID，用来做consumer和provider的来回通信标记。</span><br><span class="line">第13-16个字节：消息体的长度，也就是消息头+请求数据的长度。</span><br></pre></td></tr></table></figure><h3 id="Provider接收数据解码"><a href="#Provider接收数据解码" class="headerlink" title="Provider接收数据解码"></a>Provider接收数据解码</h3><p>provider端运行dubbo-demo-provider工程，在dubbo-remoting-netty工程NettyCodecAdapter.java内部类InternalDecoder#messageReceived()断点msg = codec.decode(channel, message)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--NettyCodecAdapter.InternalDecoder.messageReceived</span><br><span class="line">  --&gt;DubboCountCodec.decode</span><br><span class="line">    --&gt;ExchangeCodec.decode</span><br><span class="line">      --&gt;ExchangeCodec.decodeBody</span><br></pre></td></tr></table></figure><h3 id="Provider发送响应结果编码"><a href="#Provider发送响应结果编码" class="headerlink" title="Provider发送响应结果编码"></a>Provider发送响应结果编码</h3><p>Provider接收到Consumer请求调用后，将返回的数据进行编码发送给consumer.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--&gt;NettyCodecAdapter.InternalEncoder.encode</span><br><span class="line">  --&gt;DubboCountCodec.encode</span><br><span class="line">    --&gt;ExchangeCodec.encode</span><br><span class="line">      --&gt;ExchangeCodec.encodeResponse</span><br><span class="line">        --&gt;DubboCodec.encodeResponseData<span class="comment">//先写入一个字节 这个字节可能是RESPONSE_NULL_VALUE:2 RESPONSE_VALUE:1  RESPONSE_WITH_EXCEPTION: 0</span></span><br><span class="line">        正常返回：out.writeByte(RESPONSE_VALUE);  out.writeObject(ret);</span><br></pre></td></tr></table></figure><p>编码的过程大体都是一样的，但是响应端的编码稍有差别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encodeResponse</span><span class="params">(Channel channel, ChannelBuffer buffer, Response res)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> savedWriteIndex = buffer.writerIndex();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Serialization serialization = getSerialization(channel);</span><br><span class="line">            <span class="comment">// header.</span></span><br><span class="line">            <span class="keyword">byte</span>[] header = <span class="keyword">new</span> <span class="keyword">byte</span>[HEADER_LENGTH];</span><br><span class="line">            <span class="comment">// set magic number.</span></span><br><span class="line">            Bytes.short2bytes(MAGIC, header);</span><br><span class="line">            <span class="comment">// set request and serialization flag.</span></span><br><span class="line">            header[<span class="number">2</span>] = serialization.getContentTypeId();</span><br><span class="line">            <span class="keyword">if</span> (res.isHeartbeat()) header[<span class="number">2</span>] |= FLAG_EVENT;</span><br><span class="line">            <span class="comment">// set response status.</span></span><br><span class="line">            <span class="keyword">byte</span> status = res.getStatus();</span><br><span class="line">            header[<span class="number">3</span>] = status;</span><br><span class="line">            <span class="comment">// set request id.</span></span><br><span class="line">            Bytes.long2bytes(res.getId(), header, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            buffer.writerIndex(savedWriteIndex + HEADER_LENGTH);</span><br><span class="line">            ChannelBufferOutputStream bos = <span class="keyword">new</span> ChannelBufferOutputStream(buffer);</span><br><span class="line">            ObjectOutput out = serialization.serialize(channel.getUrl(), bos);</span><br><span class="line">            <span class="comment">// encode response data or error message.</span></span><br><span class="line">            <span class="keyword">if</span> (status == Response.OK) &#123;</span><br><span class="line">                <span class="keyword">if</span> (res.isHeartbeat()) &#123;</span><br><span class="line">                    encodeHeartbeatData(channel, out, res.getResult());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    encodeResponseData(channel, out, res.getResult());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> out.writeUTF(res.getErrorMessage());</span><br><span class="line">            out.flushBuffer();</span><br><span class="line">            <span class="keyword">if</span> (out <span class="keyword">instanceof</span> Cleanable) &#123;</span><br><span class="line">                ((Cleanable) out).cleanup();</span><br><span class="line">            &#125;</span><br><span class="line">            bos.flush();</span><br><span class="line">            bos.close();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> len = bos.writtenBytes();</span><br><span class="line">            checkPayload(channel, len);</span><br><span class="line">            Bytes.int2bytes(len, header, <span class="number">12</span>);</span><br><span class="line">            <span class="comment">// write</span></span><br><span class="line">            buffer.writerIndex(savedWriteIndex);</span><br><span class="line">            buffer.writeBytes(header); <span class="comment">// write header.</span></span><br><span class="line">            buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="comment">// clear buffer</span></span><br><span class="line">            buffer.writerIndex(savedWriteIndex);</span><br><span class="line">            <span class="comment">// send error message to Consumer, otherwise, Consumer will wait till timeout.</span></span><br><span class="line">            <span class="keyword">if</span> (!res.isEvent() &amp;&amp; res.getStatus() != Response.BAD_RESPONSE) &#123;</span><br><span class="line">                Response r = <span class="keyword">new</span> Response(res.getId(), res.getVersion());</span><br><span class="line">                r.setStatus(Response.BAD_RESPONSE);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (t <span class="keyword">instanceof</span> ExceedPayloadLimitException) &#123;</span><br><span class="line">                    logger.warn(t.getMessage(), t);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        r.setErrorMessage(t.getMessage());</span><br><span class="line">                        channel.send(r);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">                        logger.warn(<span class="string">"Failed to send bad_response info back: "</span> + t.getMessage() + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// FIXME log error message in Codec and handle in caught() of IoHanndler?</span></span><br><span class="line">                    logger.warn(<span class="string">"Fail to encode response: "</span> + res + <span class="string">", send bad_response info instead, cause: "</span> + t.getMessage(), t);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        r.setErrorMessage(<span class="string">"Failed to send response: "</span> + res + <span class="string">", cause: "</span> + StringUtils.toString(t));</span><br><span class="line">                        channel.send(r);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">                        logger.warn(<span class="string">"Failed to send bad_response info back: "</span> + res + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Rethrow exception</span></span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> IOException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (IOException) t;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t <span class="keyword">instanceof</span> Error) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (Error) t;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>dubbo的消息头是一个定长的 16个字节数据。<br>第1-2个字节：魔数, 一个固定的数字<br>第3个字节：序列化组件类型，它用于和客户端约定的序列化器ID<br>第四个字节：它是response的结果响应码 OK=20<br>第5-12个字节：请求id：long型8个字节。异步变同步的全局唯一ID，用来做consumer和provider的来回通信标记。<br>第13-16个字节：消息体的长度，也就是消息头+请求数据的长度。</p><h3 id="Consumer接收响应结果解码"><a href="#Consumer接收响应结果解码" class="headerlink" title="Consumer接收响应结果解码"></a>Consumer接收响应结果解码</h3><p>Consumer接收到Provider的响应结果后，将数据进行反序列化，结束调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--NettyCodecAdapter.InternalDecoder.messageReceived</span><br><span class="line">  --&gt;DubboCountCodec.decode</span><br><span class="line">    --&gt;ExchangeCodec.decode</span><br><span class="line">      --&gt;DubboCodec.decodeBody</span><br><span class="line">        --&gt;DecodeableRpcResult.decode<span class="comment">//根据RESPONSE_NULL_VALUE  RESPONSE_VALUE  RESPONSE_WITH_EXCEPTION进行响应的处理</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Dubbo远程通讯协议头定义&quot;&gt;&lt;a href=&quot;#Dubbo远程通讯协议头定义&quot; class=&quot;headerlink&quot; title=&quot;Dubbo远程通讯协议头定义&quot;&gt;&lt;/a&gt;Dubbo远程通讯协议头定义&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2018/10/06/
      
    
    </summary>
    
      <category term="Dubbo" scheme="https://hnxydq.github.io/categories/Dubbo/"/>
    
    
      <category term="源码分析" scheme="https://hnxydq.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo如何实现SOA的服务降级</title>
    <link href="https://hnxydq.github.io/2018/10/05/dubbo%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0SOA%E7%9A%84%E6%9C%8D%E5%8A%A1%E9%99%8D%E7%BA%A7/"/>
    <id>https://hnxydq.github.io/2018/10/05/dubbo如何实现SOA的服务降级/</id>
    <published>2018-10-05T14:26:03.000Z</published>
    <updated>2018-10-05T14:32:45.198Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务开关"><a href="#服务开关" class="headerlink" title="服务开关"></a>服务开关</h3><p>对于在线商城，在下单交易环节，可能需要调用A、B、C三个接口来完成，其中A和B是必须的，C只是附加功能（如在下单的时候推荐相关商品或push消息），可有可无，在平时系统没有压力，容量充足的情况下，调用下没问题，但是在类似618店庆之类的大促环节，系统满负荷运行，此时完全可以不调用C接口，怎么实现这个功能？ 改代码？—加个服务开关</p><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>使用dubbo在进行服务调用时，可能由于各种原因（服务器宕机/网络超时/并发数太高等），调用中就会出现RpcException，调用失败。</p><p>服务降级就是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行。换句话说，就是指在由于非业务异常导致的服务不可用时，可以返回默认值，避免异常影响主业务的处理。</p><ol><li>屏蔽：在大促，促销活动的可预知情况下，例如双11活动。采用直接屏蔽接口访问。（可知）</li></ol><p>​        mock=force:returnnull</p><p>   2.容错：当系统出现非业务异常(比如并发数太高导致超时，网络异常等)时，不对该接口进行处理。（不可知）</p><p>​      mock=fail:returnnull</p><h3 id="Dubbo服务降级配置"><a href="#Dubbo服务降级配置" class="headerlink" title="Dubbo服务降级配置"></a>Dubbo服务降级配置</h3><h4 id="mock配置方式"><a href="#mock配置方式" class="headerlink" title="mock配置方式"></a>mock配置方式</h4><p>dubbo官方文档上使用一个mock配置，实现服务降级。mock只在出现非业务异常(比如超时，网络异常等)时执行。mock的配置支持两种，一种为boolean值，默认的为false。如果配置为true，则缺省使用mock类名，即类名+Mock后缀；另外一种则是配置”return null”，可以很简单的忽略掉异常。</p><p>mock配置在调用方，服务降级不需要对服务方配置产生修改。下面举个例子说明，mock的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**接口定义*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FooService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSomething</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**实现类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooServiceImpl</span> <span class="keyword">implements</span> <span class="title">FooService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSomething</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service invoke: doSomething ,"</span> + str);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"service invoke: doSomething"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>provider.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"hello-world-app"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用multicast广播注册中心暴露服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.test.service.FooService"</span> <span class="attr">ref</span>=<span class="string">"fooServerImpl"</span> <span class="attr">timeout</span>=<span class="string">"10000"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 和本地bean一样实现服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"fooServerImpl"</span> <span class="attr">class</span>=<span class="string">"com.test.serviceimpl.FooServerImpl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>consumer.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"dubbo-consumer"</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"fooService"</span> <span class="attr">interface</span>=<span class="string">"com.test.service.FooService"</span>  <span class="attr">timeout</span>=<span class="string">"10000"</span> <span class="attr">check</span>=<span class="string">"false"</span> <span class="attr">mock</span>=<span class="string">"return null"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试在调用端调用服务两个方法，当服务端正常启动时，程序获得正常返回值；当服务提供方没有启动（模拟服务不可用状态）,调用方依然正常运行，调用doSomething获取返回值时null。</p><h4 id="mock实现接口方式"><a href="#mock实现接口方式" class="headerlink" title="mock实现接口方式"></a>mock实现接口方式</h4><p>上面在<code>&lt;dubbuo:reference&gt;</code> 中配置<code>mock=&quot;retrun null&quot;</code> 的配置，在服务降级时会对service中的所有方法做统一处理，即都返回null。但是有的时候我们需要一些方法在服务不可用时告诉我们一些其他信息，以便做其他处理。如更新/删除等。要有较好的区分，可以通过以下的方式。</p><p>配置<code>mock=&quot;true&quot;</code> ,同时实现mock接口，类名要注意命名规范：接口名+Mock后缀。此时如果调用失败会调用Mock实现。mock实现需要保证有无参的构造方法。</p><p>配置mock=”true”的情况，对于上面的例子即在FooService的同个路径下，添加类FooServiceMock，实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooServiceMock</span> <span class="keyword">implements</span> <span class="title">FooService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSomething</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dubbo服务降级具体实现"><a href="#Dubbo服务降级具体实现" class="headerlink" title="Dubbo服务降级具体实现"></a>Dubbo服务降级具体实现</h4><p>通过Dubbo的Filter对Dubbo进行扩展，从而使得每次服务发起调用都可以得到监控，从而可以监控每次服务的调用。</p><p><u>对自动判断服务提供端是否宕机：通过一个记录器对每个方法出现RPC异常进行记录，并且可以配置在某个时间段内连续出现都少个异常可判定为服务提供端出现了宕机，从而进行服务降级。</u></p><p><u>自动恢复远程服务调用：通过配置检查服务的频率来达到定时检查远程服务是否可用，从而去除服务降级。</u></p><h4 id="判断降级相关配置"><a href="#判断降级相关配置" class="headerlink" title="判断降级相关配置"></a>判断降级相关配置</h4><p>降级配置分配为应用级别，接口级别，方法级别 。dubbo相关参数配置在dubbo.properties中,默认是在classpath根目录，也可以通过-Ddubbo.properties.file来指定该文件路径。</p><p>1.应用级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dubbo.reference.default.break.limit:该参数是配置一个方法在指定时间内出现多少个异常则判断为服务提供方宕机 </span><br><span class="line">dubbo.reference.default.retry.frequency:该参数配置重试频率，比如配置100，则表示没出现一百次异常则尝试一下远程服务是否可用 </span><br><span class="line">dubbo.reference.circuit.break:服务降级功能开关，默认是false，表示关闭状态，可以配置为true</span><br></pre></td></tr></table></figure><p>2.接口级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dubbo.reference.fullinterfacename.break.limit:同上面dubbo.reference.default−break−limit，指定某个接口dubbo.reference.&#123;fullinterfacename&#125;.retry.frequency:同上面 </span><br><span class="line">dubbo.reference.$&#123;fullinterfacename&#125;.circuit.break:服务降级功能开关，默认是false，表示关闭状态，可以配置为true</span><br></pre></td></tr></table></figure><p>3.方法级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dubbo.reference.fullinterfacename.&#123;methodName&#125;.break.limit:同上面dubbo.reference.default-break-limit，指定某个接口的某个方法 </span><br><span class="line">dubbo.reference.fullinterfacename.&#123;methodName&#125;.retry.frequency:同上面dubbo.reference.default-retry-frequency，指定某个接口的某个方法 </span><br><span class="line">dubbo.reference.fullinterfacename.&#123;methodName&#125;.circuit.break:服务降级功能开关，默认是false，表示关闭状态，可以配置为true</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;服务开关&quot;&gt;&lt;a href=&quot;#服务开关&quot; class=&quot;headerlink&quot; title=&quot;服务开关&quot;&gt;&lt;/a&gt;服务开关&lt;/h3&gt;&lt;p&gt;对于在线商城，在下单交易环节，可能需要调用A、B、C三个接口来完成，其中A和B是必须的，C只是附加功能（如在下单的时候推荐相
      
    
    </summary>
    
      <category term="Dubbo" scheme="https://hnxydq.github.io/categories/Dubbo/"/>
    
    
      <category term="源码分析" scheme="https://hnxydq.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo服务响应执行过程</title>
    <link href="https://hnxydq.github.io/2018/10/05/Dubbo%E6%9C%8D%E5%8A%A1%E5%93%8D%E5%BA%94%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/"/>
    <id>https://hnxydq.github.io/2018/10/05/Dubbo服务响应执行过程/</id>
    <published>2018-10-05T05:27:32.000Z</published>
    <updated>2018-10-05T14:18:38.619Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Dubbo总体设计流程"><a href="#Dubbo总体设计流程" class="headerlink" title="Dubbo总体设计流程"></a>Dubbo总体设计流程</h3><p><img src="/2018/10/05/Dubbo服务响应执行过程/provider-response.PNG" alt="provider-response"></p><h3 id="Provider的响应流程："><a href="#Provider的响应流程：" class="headerlink" title="Provider的响应流程："></a>Provider的响应流程：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">NettyHandler.messageReceived</span><br><span class="line">  --&gt;AbstractPeer.received</span><br><span class="line">    --&gt;MultiMessageHandler.received</span><br><span class="line">      --&gt;HeartbeatHandler.received</span><br><span class="line">        --&gt;AllChannelHandler.received</span><br><span class="line">          --&gt;ChannelEventRunnable.run <span class="comment">//线程池 执行线程</span></span><br><span class="line">            --&gt;DecodeHandler.received</span><br><span class="line">              --&gt;HeaderExchangeHandler.received</span><br><span class="line">                --&gt;handleRequest(exchangeChannel, request)<span class="comment">//网络通信接收处理 </span></span><br><span class="line">                  --&gt;DubboProtocol.reply</span><br><span class="line">                    --&gt;getInvoker</span><br><span class="line">                      --&gt;exporterMap.get(serviceKey)<span class="comment">//从服务暴露里面提取 </span></span><br><span class="line">                      --&gt;DubboExporter.getInvoker()<span class="comment">//最终得到一个invoker</span></span><br><span class="line">---------------------扩展点--------------</span><br><span class="line">                    --&gt;ProtocolFilterWrapper.invoke</span><br><span class="line">                      --&gt;EchoFilter.invoke</span><br><span class="line">                        --&gt;ClassLoaderFilter.invoke</span><br><span class="line">                          --&gt;GenericFilter.invoke</span><br><span class="line">                            --&gt;TraceFilter.invoke</span><br><span class="line">                              --&gt;MonitorFilter.invoke</span><br><span class="line">                                --&gt;TimeoutFilter.invoke</span><br><span class="line">                                  --&gt;ExceptionFilter.invoke</span><br><span class="line">                                    --&gt;InvokerWrapper.invoke</span><br><span class="line">---------------------扩展点--------------</span><br><span class="line">                                      --&gt;AbstractProxyInvoker.invoke</span><br><span class="line">                                        --&gt;JavassistProxyFactory.AbstractProxyInvoker.doInvoke</span><br><span class="line">                                          --&gt; 进入真正执行的实现类   DemoServiceImpl.sayHello</span><br><span class="line">                                        ....................................</span><br><span class="line">                --&gt;channel.send(response);<span class="comment">//把接收处理的结果，发送回去 </span></span><br><span class="line">                  --&gt;AbstractPeer.send</span><br><span class="line">                    --&gt;NettyChannel.send</span><br><span class="line">                      --&gt;ChannelFuture future = channel.write(message);<span class="comment">//数据发回consumer</span></span><br></pre></td></tr></table></figure><h3 id="Consumer接收响应流程："><a href="#Consumer接收响应流程：" class="headerlink" title="Consumer接收响应流程："></a>Consumer接收响应流程：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NettyHandler.messageReceived</span><br><span class="line">  --&gt;AbstractPeer.received</span><br><span class="line">    --&gt;MultiMessageHandler.received</span><br><span class="line">      --&gt;HeartbeatHandler.received</span><br><span class="line">        --&gt;AllChannelHandler.received</span><br><span class="line">          --&gt;ChannelEventRunnable.run <span class="comment">//线程池 执行线程</span></span><br><span class="line">            --&gt;DecodeHandler.received</span><br><span class="line">              --&gt;HeaderExchangeHandler.received</span><br><span class="line">                --&gt;handleResponse(channel, (Response) message);</span><br><span class="line">                  --&gt;HeaderExchangeHandler.handleResponse</span><br><span class="line">                    --&gt;DefaultFuture.received</span><br><span class="line">                      --&gt;DefaultFuture.doReceived</span><br></pre></td></tr></table></figure><p>分析DefaultFuture.doReceived()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doReceived</span><span class="params">(Response res)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response = res;</span><br><span class="line">            <span class="keyword">if</span> (done != <span class="keyword">null</span>) &#123;</span><br><span class="line">                done.signal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            invokeCallback(callback);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是Dubbo网络通信IO异步转同步的方式。</p><h3 id="Dubbo网络通信IO异步转同步"><a href="#Dubbo网络通信IO异步转同步" class="headerlink" title="Dubbo网络通信IO异步转同步"></a>Dubbo网络通信IO异步转同步</h3><p>Dubbo是基于Netty NIO的非阻塞并行调用通信，通信方式有三种类型，参见DubboInvoker.java：</p><p>1.异步，有返回值</p><p>修改consumer-dubbo.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">check</span>=<span class="string">"false"</span> <span class="attr">interface</span>=<span class="string">"com.alibaba.dubbo.demo.DemoService"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"sayHello"</span> <span class="attr">async</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改Consumer调用代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DemoService demoService = (DemoService) context.getBean(<span class="string">"demoService"</span>); <span class="comment">// get remote service proxy</span></span><br><span class="line">String hello = demoService.sayHello(<span class="string">"world"</span>); <span class="comment">// call remote method</span></span><br><span class="line">Future&lt;Object&gt; future = RpcContext.getContext().getFuture();</span><br><span class="line"><span class="comment">// get result</span></span><br><span class="line">System.out.println(future.get());</span><br></pre></td></tr></table></figure><p>2.异步，无返回值</p><p>修改consumer-dubbo.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">check</span>=<span class="string">"false"</span> <span class="attr">interface</span>=<span class="string">"com.alibaba.dubbo.demo.DemoService"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"sayHello"</span> <span class="attr">async</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改Consumer调用代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DemoService demoService = (DemoService) context.getBean(<span class="string">"demoService"</span>); <span class="comment">// get remote service proxy</span></span><br><span class="line">String hello = demoService.sayHello(<span class="string">"world"</span>); <span class="comment">// call remote method</span></span><br><span class="line"><span class="comment">// get result</span></span><br><span class="line">System.out.println(hello);</span><br></pre></td></tr></table></figure><p>3.异步变同步(默认通信方式)</p><p>  A.当前线程怎么让它 ”暂停，等结果回来后，再执行”？—-Future</p><p>  B.socket是一个全双工的通信方式，那么在多线程的情况下，如何知道那个返回结果对应原先那条线程的调用？<br>  —-通过一个全局唯一的ID来做consumer 和 provider 来回传输。</p><p>如DefaultFuture：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// invoke id.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Channel channel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Request request;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> timeout;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition done = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> sent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Response response;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> ResponseCallback callback;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultFuture</span><span class="params">(Channel channel, Request request, <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.channel = channel;</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">        <span class="keyword">this</span>.id = request.getId();</span><br><span class="line">        <span class="keyword">this</span>.timeout = timeout &gt; <span class="number">0</span> ? timeout : channel.getUrl().getPositiveParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT);</span><br><span class="line">        <span class="comment">// put into waiting map.</span></span><br><span class="line">        FUTURES.put(id, <span class="keyword">this</span>);</span><br><span class="line">        CHANNELS.put(id, channel);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中的id就是全局通信id，Consumer调用时会设置id，响应时仍然填充返回。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Dubbo总体设计流程&quot;&gt;&lt;a href=&quot;#Dubbo总体设计流程&quot; class=&quot;headerlink&quot; title=&quot;Dubbo总体设计流程&quot;&gt;&lt;/a&gt;Dubbo总体设计流程&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2018/10/05/Dubbo服务响应执行过
      
    
    </summary>
    
      <category term="Dubbo" scheme="https://hnxydq.github.io/categories/Dubbo/"/>
    
    
      <category term="源码分析" scheme="https://hnxydq.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo请求调用分析</title>
    <link href="https://hnxydq.github.io/2018/10/04/Dubbo%E6%9C%8D%E5%8A%A1%E8%AF%B7%E6%B1%82%E8%B0%83%E7%94%A8%E5%88%86%E6%9E%90/"/>
    <id>https://hnxydq.github.io/2018/10/04/Dubbo服务请求调用分析/</id>
    <published>2018-10-04T13:43:35.000Z</published>
    <updated>2018-10-04T14:13:00.708Z</updated>
    
    <content type="html"><![CDATA[<p>接下来分析Consumer的请求调用原理。以运行方式启动provider，以debug模式启动consumer。</p><p>我们在DemoConsumer类中打断点作为起点来跟踪具体的调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDemoService</span><span class="params">(DemoService demoService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.demoService = demoService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String hello = demoService.sayHello(<span class="string">"world"</span> + i);</span><br><span class="line">                System.out.println(<span class="string">"["</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()) + <span class="string">"] "</span> + hello);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在idea中断点状态下查看表达式的值，可以使用Alt+F8查看。</p><p>从demoService.sayHello()说起：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">demoService.sayHello(<span class="string">"world"</span> + i)</span><br><span class="line">--&gt;InvokerInvocationHandler.invoke</span><br><span class="line">  --&gt;invoker.invoke(<span class="keyword">new</span> RpcInvocation(method, args))</span><br><span class="line">    --&gt;RpcInvocation<span class="comment">//所有请求参数都会转换为RpcInvocation</span></span><br><span class="line">    --&gt;MockClusterInvoker.invoke(Invocation invocation) <span class="comment">//1.进入集群</span></span><br><span class="line">      --&gt;invoker.invoke(invocation)  <span class="comment">//RpcInvocation [methodName=sayHello, parameterTypes=[class java.lang.String], arguments=[world0], attachments=&#123;&#125;]</span></span><br><span class="line">        --&gt;AbstractClusterInvoker.invoke(<span class="keyword">final</span> Invocation invocation)</span><br><span class="line">          --&gt;list(invocation)</span><br><span class="line">            --&gt;directory.list(invocation)<span class="comment">//2.进入目录查找   从this.methodInvokerMap里面查找一个Invoker</span></span><br><span class="line">              --&gt;AbstractDirectory.list(Invocation invocation)</span><br><span class="line">                --&gt;doList(invocation)</span><br><span class="line">                  --&gt;RegistryDirectory.doList(Invocation invocation)<span class="comment">// 从this.methodInvokerMap里面查找一个Invoker</span></span><br><span class="line">                --&gt;router.route <span class="comment">//3.进入路由 </span></span><br><span class="line">                  --&gt;MockInvokersSelector.route(<span class="keyword">final</span> List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, <span class="keyword">final</span> Invocation invocation)</span><br><span class="line">                    --&gt;getNormalInvokers(<span class="keyword">final</span> List&lt;Invoker&lt;T&gt;&gt; invokers)</span><br><span class="line">          --&gt;ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(<span class="string">"roundrobin"</span>)</span><br><span class="line">          --&gt;<span class="keyword">return</span> doInvoke(invocation, invokers, loadbalance)</span><br><span class="line">            --&gt;FailoverClusterInvoker.doInvoke(Invocation invocation, <span class="keyword">final</span> List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span><br><span class="line">              --&gt;select(loadbalance, invocation, copyinvokers, invoked) <span class="comment">//4.进入负载均衡</span></span><br><span class="line">                --&gt;AbstractClusterInvoker.select <span class="comment">//使用loadbalance选择invoker. a)先lb选择，如果在selected列表中 或者 不可用且做检验时，进入下一步(重选),否则直接返回&lt;/br&gt; * b)重选验证规则：selected &gt; available .保证重选出的结果尽量不在select中，并且是可用的</span></span><br><span class="line">                  --&gt;doselect(loadbalance, invocation, invokers, selected) <span class="comment">////如果只有一个invoker，则直接返回该invoker；如果有两个则退化成轮训；如果更多则做负载均衡如下：</span></span><br><span class="line">                    --&gt;loadbalance.select</span><br><span class="line">                      --&gt;AbstractLoadBalance.select  <span class="comment">//默认做loadbalance</span></span><br><span class="line">                        --&gt;doSelect</span><br><span class="line">                          --&gt;RoundRobinLoadBalance.doSelect </span><br><span class="line">                            --&gt;<span class="keyword">return</span> invokers.get(currentSequence % length)<span class="comment">//取模轮循</span></span><br><span class="line">              --&gt;Result result = invoker.invoke(invocation)</span><br></pre></td></tr></table></figure><p>集群容错的基本流程：</p><p><img src="/2018/10/04/Dubbo服务请求调用分析/cluster_invoker.png" alt="cluster_invoker"></p><h3 id="Directory目录服务"><a href="#Directory目录服务" class="headerlink" title="Directory目录服务"></a>Directory目录服务</h3><p>包含StaticDirectory和RegistryDirectory。</p><p>其中StaticDirectory是静态的，invoker是固定的；RegistryDirectory是注册目录服务，它的Invoker集合来自于ZK，实现了NotifyListener接口，实现了void notify(List<url> urls);方法，整个过程维护了一个重要变量methodInvokerMap，该map是数据的来源，同时也是notify (RegostryDirectory#notify())的重要操作对象，重点是写操作。（通过doList来完成读操作，通过notify完成写操作, 写操作参照消费者服务引用分析listener.notify(categoryList)）;</url></p><p>下面是读操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--&gt;directory.list<span class="comment">//2.进入目录查找   从this.methodInvokerMap里面查找一个Invoker</span></span><br><span class="line">  --&gt;AbstractDirectory.list</span><br><span class="line">    --&gt;doList(invocation) <span class="comment">//完成读操作</span></span><br><span class="line">      --&gt;RegistryDirectory.doList<span class="comment">// 从this.methodInvokerMap里面查找一个Invoker</span></span><br><span class="line">    --&gt;router.route <span class="comment">//3.进入路由 </span></span><br><span class="line">      --&gt;MockInvokersSelector.route</span><br><span class="line">        --&gt;getNormalInvokers</span><br></pre></td></tr></table></figure><h3 id="Router路由规则"><a href="#Router路由规则" class="headerlink" title="Router路由规则"></a>Router路由规则</h3><h3 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FailoverCluster：（默认）失败转移，当出现失败，重试其它服务器，通常用于读操作，但重试会带来更长延迟。</span><br><span class="line">FailfastCluster：快速失败，只发起一次调用，失败立即报错，通常用于非幂等性的写操作。</span><br><span class="line">FailbackCluster：失败自动恢复，后台记录失败请求，定时重发，通常用于消息通知操作。</span><br><span class="line">FailsafeCluster：失败安全，出现异常时，直接忽略，通常用于写入审计日志等操作。</span><br><span class="line">ForkingCluster：并行调用，只要一个成功即返回，通常用于实时性要求较高的操作，但需要浪费更多服务资源。</span><br><span class="line">BroadcastCluster: 广播调用。遍历所有Invokers,逐个调用每个调用catch住异常不影响其他invoker调用</span><br><span class="line">MergeableCluster: 分组聚合，按组合并返回结果，比如菜单服务，接口一样，但有多种实现，用group区分，现在消费方需从每种group中调用一次返回结果，合并结果返回，这样就可以实现聚合菜单项。</span><br><span class="line">AvailableCluster:获取可用的调用。遍历所有Invokers判断Invoker.isAvalible,只要一个有为true直接调用返回，不管成不成功。</span><br></pre></td></tr></table></figure><h3 id="LoadBalance"><a href="#LoadBalance" class="headerlink" title="LoadBalance"></a>LoadBalance</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RandomLoadBalance：随机，按权重设置随机概率。在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</span><br><span class="line">RoundRobinLoadBalance：轮循，按公约后的权重设置轮循比率。存在慢的提供者累积请求问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</span><br><span class="line">LeastActiveLoadBalance：最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</span><br><span class="line">ConsistentHashLoadBalance：一致性Hash，相同参数的请求总是发到同一提供者。当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</span><br></pre></td></tr></table></figure><p>接着前面的调用流程继续分析，FailoverClusterInvoker#doInvoke(Invocation invocation, final List&lt;Invoker<t>&gt; invokers, LoadBalance loadbalance)：</t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">--&gt;Result result = invoker.invoke(invocation)</span><br><span class="line">  --&gt;InvokerWrapper.invoke(Invocation invocation)</span><br><span class="line">    --&gt;ProtocolFilterWrapper.buildInvokerChain() #invoke()</span><br><span class="line">    --&gt; ConsumerContextFilter.invoke()</span><br><span class="line">      --&gt;ProtocolFilterWrapper.buildInvokerChain() #invoke()</span><br><span class="line">       --&gt;MonitorFilter.invoke</span><br><span class="line">         --&gt;ProtocolFilterWrapper.buildInvokerChain() #invoke()</span><br><span class="line">        --&gt;FutureFilter.invoke</span><br><span class="line">          --&gt;ListenerInvokerWrapper.invoke</span><br><span class="line">            --&gt;AbstractInvoker.invoke</span><br><span class="line">              --&gt;doInvoke(invocation)</span><br><span class="line">       --&gt;DubboInvoker.doInvoke</span><br><span class="line">         --&gt;ReferenceCountExchangeClient.sendRequest</span><br><span class="line">           --&gt;HeaderExchangeClient.request</span><br><span class="line">             --&gt;HeaderExchangeChannel.request</span><br><span class="line">               --&gt;AbstractPeer.send(Object message)</span><br><span class="line">      --&gt;NettyChannel.send</span><br><span class="line">        --&gt;ChannelFuture future = channel.writeAndFlush(message);<span class="comment">//通过netty的channel发送网络数据</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接下来分析Consumer的请求调用原理。以运行方式启动provider，以debug模式启动consumer。&lt;/p&gt;
&lt;p&gt;我们在DemoConsumer类中打断点作为起点来跟踪具体的调用：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="Dubbo" scheme="https://hnxydq.github.io/categories/Dubbo/"/>
    
    
      <category term="源码分析" scheme="https://hnxydq.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo服务引用的设计原理</title>
    <link href="https://hnxydq.github.io/2018/10/04/Dubbo%E6%9C%8D%E5%8A%A1%E5%BC%95%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/"/>
    <id>https://hnxydq.github.io/2018/10/04/Dubbo服务引用的设计原理/</id>
    <published>2018-10-04T08:35:38.000Z</published>
    <updated>2018-10-04T14:05:00.235Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>首先为了分析服务引用的过程， 需要在源码中修改注册中心的地址如下：</p><p>dubbo-demo项目的dubbo-demo-consumer/src/test/resources/dubbo.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#dubbo.registry.address=multicast://224.5.6.7:1234</span><br><span class="line">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br></pre></td></tr></table></figure><p>dubbo-demo项目的dubbo-demo-consumer/src/main/resources/META-INF/spring/dubbo-demo-consumer.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用multicast广播注册中心暴露发现服务地址 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dubbo:registry address="multicast://224.5.6.7:1234"/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"127.0.0.1:2181"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>使用两个Idea，分别运行producer和consumer。其中consumer用来断点跟踪。</p><p><img src="/2018/10/04/Dubbo服务引用的设计原理/demo-consumer.PNG" alt="demo-consumer"></p><p>消费者代码入口代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        com.alibaba.dubbo.container.Main.main(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据dubbo-demo-consumer.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">check</span>=<span class="string">"false"</span> <span class="attr">interface</span>=<span class="string">"com.alibaba.dubbo.demo.DemoService"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>reference标签定义的名称空间代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Version.checkDuplicate(DubboNamespaceHandler.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"application"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ApplicationConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"module"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ModuleConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"registry"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(RegistryConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"monitor"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(MonitorConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"provider"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProviderConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"consumer"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ConsumerConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"protocol"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProtocolConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"service"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ServiceBean.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"reference"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ReferenceBean.class, <span class="keyword">false</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"annotation"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(AnnotationBean.class, <span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到具体实现为ReferenceBean.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceBean</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ReferenceConfig</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">FactoryBean</span>, <span class="title">ApplicationContextAware</span>, <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>ReferenceBean继承自ReferenceConfig，同时实现了InitializingBean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么Spring初始化会调用到ReferenceBean类的afterPropertiesSet()，在该方法中调用getObject()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着调用到ReferenceConfig：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (destroyed) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already destroyed!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ref == <span class="keyword">null</span>) &#123;</span><br><span class="line">            init();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dubbo的引用流程："><a href="#Dubbo的引用流程：" class="headerlink" title="Dubbo的引用流程："></a>Dubbo的引用流程：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">ReferenceBean.getObject()</span><br><span class="line">  --&gt;ReferenceConfig.get()</span><br><span class="line">    --&gt;init()</span><br><span class="line">      --&gt;createProxy(map)</span><br><span class="line">        --&gt;refprotocol.refer(interfaceClass, urls.get(<span class="number">0</span>))</span><br><span class="line">          --&gt;ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(<span class="string">"registry"</span>);</span><br><span class="line">          --&gt;extension.refer(arg0, arg1);</span><br><span class="line">            --&gt;ProtocolFilterWrapper.refer(Class&lt;T&gt; type, URL url)</span><br><span class="line">  --&gt;ProtocolListenerWrapper.refer(Class&lt;T&gt; type, URL url)</span><br><span class="line">  --&gt;RegistryProtocol.refer(Class&lt;T&gt; type, URL url)</span><br><span class="line">--&gt;registryFactory.getRegistry(url)<span class="comment">//建立zk的连接，和服务端发布一样，省略</span></span><br><span class="line">--&gt;doRefer(cluster, registry, type, url)</span><br><span class="line">  --&gt;FailbackRegistry.register(URL url)<span class="comment">//创建zk的节点</span></span><br><span class="line">--&gt;ZookeeperRegistry.doRegister(URL url)</span><br><span class="line">--&gt;zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, <span class="keyword">true</span>)); <span class="comment">//节点名为：dubbo/com.alibaba.dubbo.demo.DemoService/consumers</span></span><br><span class="line">....其余参见服务发布代码</span><br><span class="line">  --&gt;registry.subscribe<span class="comment">//订阅zk的节点，和服务端发布一样(省略代码)。   /dubbo/com.alibaba.dubbo.demo.DemoService/providers, /dubbo/com.alibaba.dubbo.demo.DemoService/configurators, /dubbo/com.alibaba.dubbo.demo.DemoService/routers]</span></span><br><span class="line">--&gt;notify(url, listener, urls);</span><br><span class="line">  --&gt;FailbackRegistry.notify(URL url, NotifyListener listener, List&lt;URL&gt; urls)</span><br><span class="line">--&gt;doNotify(url, listener, urls);</span><br><span class="line">  --&gt;AbstractRegistry.notify(URL url, NotifyListener listener, List&lt;URL&gt; urls)</span><br><span class="line">--&gt;saveProperties(url);<span class="comment">//把服务端的注册url信息更新到C:\Users\dongqiang\.dubbo\dubbo-registry-127.0.0.1.cache</span></span><br><span class="line">  --&gt;registryCacheExecutor.execute(<span class="keyword">new</span> SaveProperties(version));<span class="comment">//采用线程池来处理</span></span><br><span class="line">--&gt;listener.notify(categoryList)</span><br><span class="line">  --&gt;RegistryDirectory.notify</span><br><span class="line">--&gt;refreshInvoker(invokerUrls)<span class="comment">//刷新缓存中的invoker列表</span></span><br><span class="line">  --&gt;destroyUnusedInvokers(oldUrlInvokerMap,newUrlInvokerMap); <span class="comment">// 关闭未使用的Invoker</span></span><br><span class="line">  --&gt;最终目的：刷新Map&lt;String, Invoker&lt;T&gt;&gt; urlInvokerMap 对象 刷新Map&lt;String, List&lt;Invoker&lt;T&gt;&gt;&gt; methodInvokerMap对象</span><br><span class="line">  --&gt;cluster.join(directory)<span class="comment">//加入集群路由</span></span><br><span class="line">--&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(<span class="string">"failover"</span>);</span><br><span class="line">  --&gt;MockClusterWrapper.join(Directory&lt;T&gt; directory)</span><br><span class="line">--&gt;<span class="keyword">this</span>.cluster.join(directory)</span><br><span class="line">  --&gt;FailoverCluster.join(Directory&lt;T&gt; directory)</span><br><span class="line">--&gt;<span class="keyword">return</span> <span class="keyword">new</span> FailoverClusterInvoker&lt;T&gt;(directory)</span><br><span class="line">--&gt;<span class="keyword">new</span> MockClusterInvoker(Directory&lt;T&gt; directory, Invoker&lt;T&gt; invoker)</span><br><span class="line">        --&gt;proxyFactory.getProxy(invoker)<span class="comment">//创建服务代理</span></span><br><span class="line">          --&gt;ProxyFactory$Adpative.getProxy</span><br><span class="line">            --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(<span class="string">"javassist"</span>);</span><br><span class="line">              --&gt;StubProxyFactoryWrapper.getProxy(Invoker&lt;T&gt; invoker)</span><br><span class="line">                --&gt;proxyFactory.getProxy(invoker)</span><br><span class="line">                  --&gt;AbstractProxyFactory.getProxy(Invoker&lt;T&gt; invoker)</span><br><span class="line">                    --&gt;JavassistProxyFactory.getProxy(invoker, interfaces)</span><br><span class="line">  --&gt;<span class="keyword">return</span> (T) Proxy.getProxy(interfaces).newInstance(<span class="keyword">new</span> InvokerInvocationHandler(invoker))，即：</span><br><span class="line">  --&gt;Proxy.getProxy(interfaces)<span class="comment">//代理对象interfaces为：com.alibaba.dubbo.demo.DemoService, interface com.alibaba.dubbo.rpc.service.EchoService</span></span><br><span class="line">  --&gt;InvokerInvocationHandler <span class="comment">//采用jdk自带的InvocationHandler，创建InvokerInvocationHandler对象。</span></span><br></pre></td></tr></table></figure><p>服务引用的代码中，对于连接注册与订阅zk的流程和服务发布是一致的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDemoService</span><span class="params">(DemoService demoService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.demoService = demoService;</span><br><span class="line">    &#125;</span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String hello = demoService.sayHello(<span class="string">"world"</span> + i);</span><br></pre></td></tr></table></figure><p>Spring框架最终将invoker转换为demoService对象。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过流程图将关键节点描述如下：</p><p><img src="/2018/10/04/Dubbo服务引用的设计原理/consumer-ref.PNG" alt="consumer-ref"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;p&gt;首先为了分析服务引用的过程， 需要在源码中修改注册中心的地址如下：&lt;/p&gt;
&lt;p&gt;dubbo-demo项目的dubbo-demo-consu
      
    
    </summary>
    
      <category term="Dubbo" scheme="https://hnxydq.github.io/categories/Dubbo/"/>
    
    
      <category term="源码分析" scheme="https://hnxydq.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo服务发布原理</title>
    <link href="https://hnxydq.github.io/2018/10/03/Dubbo%E6%9C%8D%E5%8A%A1%E5%8F%91%E5%B8%83%E5%8E%9F%E7%90%86/"/>
    <id>https://hnxydq.github.io/2018/10/03/Dubbo服务发布原理/</id>
    <published>2018-10-03T13:45:52.000Z</published>
    <updated>2018-10-03T13:48:55.159Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>修改dubbo-demo子项目的dubbo-demo-provider模块的main/resources/dubbo-demo-provider.xml中注册中心的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用multicast广播注册中心暴露服务地址 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dubbo:registry address="multicast://224.5.6.7:1234"/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"127.0.0.1:2181"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>同时修改dubbo-demo子项目的dubbo-demo-provider模块的test/resources/dubbo.properties文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#dubbo.registry.address=multicast://224.5.6.7:1234</span><br><span class="line">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br></pre></td></tr></table></figure><p>需要外部下载启动zookeeper组件。</p><p>然后启动dubbo-demo-provider/test/java下的DemoProvider观察服务启动日志：</p><p><img src="/2018/10/03/Dubbo服务发布原理/demo-provider.PNG" alt="demo-provider"></p><p>从Provider启动日志可以看到，主要做了6个发布动作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.暴露本地服务</span><br><span class="line">2.暴露远程服务</span><br><span class="line">3.启动Netty</span><br><span class="line">4.打开连接Zookeeper</span><br><span class="line">5.到zookeeper注册</span><br><span class="line">6.监听zookeeper</span><br></pre></td></tr></table></figure><p>暴露的服务，其实就是dubbo-demo-provider.xml中配置的service：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 和本地bean一样实现服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.alibaba.dubbo.demo.DemoService"</span> <span class="attr">ref</span>=<span class="string">"demoService"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>dubbo:service是在dubbo-config-spring下resources/META-INF下的dubbo.xsd约束schema文件中定义的。</p><p>而处理Handler在dubbo-config-spring下的schema包下的DubboNamespaceHandler.java中处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Version.checkDuplicate(DubboNamespaceHandler.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"application"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ApplicationConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"module"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ModuleConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"registry"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(RegistryConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"monitor"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(MonitorConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"provider"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProviderConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"consumer"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ConsumerConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"protocol"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProtocolConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"service"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ServiceBean.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"reference"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ReferenceBean.class, <span class="keyword">false</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"annotation"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(AnnotationBean.class, <span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，service标签对应的Bean为ServiceBean。看看ServiceBean类继承关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceBean</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ServiceConfig</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span>, <span class="title">ApplicationContextAware</span>, <span class="title">ApplicationListener</span>, <span class="title">BeanNameAware</span></span></span><br></pre></td></tr></table></figure><p>这里ServiceBean继承自ServiceConfig，并且实现了Spring框架的ApplicationListener接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationListener</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span>&gt; <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(E var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在Spring框架启动时，会去回调执行ServiceBean的onApplicationEvent(e)方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ContextRefreshedEvent.class.getName().equals(event.getClass().getName())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isDelay() &amp;&amp; !isExported() &amp;&amp; !isUnexported()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                    logger.info(<span class="string">"The service ready on spring started. service: "</span> + getInterface());</span><br><span class="line">                &#125;</span><br><span class="line">                export();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行调用分析如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ServiceBean.onApplicationEvent</span><br><span class="line">--&gt;export()</span><br><span class="line">  --&gt;ServiceConfig.export()</span><br><span class="line">    --&gt;doExport()</span><br><span class="line">      --&gt;doExportUrls()<span class="comment">//里面有一个for循环，代表了一个服务可以有多个通信协议，例如 tcp协议 http协议，默认是tcp协议</span></span><br><span class="line">        --&gt;loadRegistries(<span class="keyword">true</span>)<span class="comment">//从dubbo.properties里面组装registry的url信息：registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;dubbo=2.0.0&amp;owner=william&amp;pid=2752&amp;registry=zookeeper&amp;timestamp=1519438717974</span></span><br><span class="line">        --&gt;doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs)</span><br></pre></td></tr></table></figure><p>这里分为本地暴露和远程暴露。那么暴露本地服务和暴露远程服务的区别是什么？</p><p>1.暴露本地服务：指暴露在用一个JVM里面，不用通过调用zk来进行远程通信。例如：在同一个服务，自己调用自己的接口，就没必要进行网络IP连接来通信。</p><p>2.暴露远程服务：指暴露给远程客户端的IP和端口号，通过网络来实现通信。</p><h3 id="本地暴露"><a href="#本地暴露" class="headerlink" title="本地暴露"></a>本地暴露</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置不是remote的情况下做本地暴露 (配置为remote，则表示只暴露远程服务)</span></span><br><span class="line">          --&gt;exportLocal(URL url) <span class="comment">//本地暴露</span></span><br><span class="line">            --&gt;proxyFactory.getInvoker(ref, (Class) interfaceClass, local)</span><br><span class="line">              --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(<span class="string">"javassist"</span>);</span><br><span class="line">              --&gt;extension.getInvoker(arg0, arg1, arg2)</span><br><span class="line">                --&gt;StubProxyFactoryWrapper.getInvoker(T proxy, Class&lt;T&gt; type, URL url) </span><br><span class="line">                  --&gt;proxyFactory.getInvoker(proxy, type, url)</span><br><span class="line">                    --&gt;JavassistProxyFactory.getInvoker(T proxy, Class&lt;T&gt; type, URL url)</span><br><span class="line">                      --&gt;Wrapper.getWrapper(com.alibaba.dubbo.demo.provider.DemoServiceImpl)</span><br><span class="line">                        --&gt;makeWrapper(Class&lt;?&gt; c)</span><br><span class="line">                      --&gt;<span class="keyword">return</span> <span class="keyword">new</span> AbstractProxyInvoker&lt;T&gt;(proxy, type, url)</span><br><span class="line">            --&gt;protocol.export(Invoker&lt;T&gt; invoker)</span><br><span class="line">              --&gt;Protocol$Adpative.export(Invoker&lt;T&gt; invoker)</span><br><span class="line">                --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(<span class="string">"injvm"</span>);</span><br><span class="line">                --&gt;extension.export(arg0) <span class="comment">//extension为ProtocolFilterWrapper</span></span><br><span class="line">                  --&gt;ProtocolFilterWrapper.export(Invoker&lt;T&gt; invoker)</span><br><span class="line">                    --&gt;ProtocolFilterWrapper.buildInvokerChain(<span class="keyword">final</span> Invoker&lt;T&gt; invoker, String key, String group) <span class="comment">//创建8个filter</span></span><br><span class="line">                    --&gt;ProtocolListenerWrapper.export(Invoker&lt;T&gt; invoker)</span><br><span class="line">                      --&gt;InjvmProtocol.export(Invoker&lt;T&gt; invoker)</span><br><span class="line">                        --&gt;<span class="keyword">return</span> <span class="keyword">new</span> InjvmExporter&lt;T&gt;(invoker, invoker.getUrl().getServiceKey(), exporterMap)</span><br><span class="line">--&gt;exporterMap.put(key, <span class="keyword">this</span>)<span class="comment">//key=com.alibaba.dubbo.demo.DemoService, this=InjvmExporter //这里也是上面整个代码的目的，为了把要暴露的对象存储在exporterMap里</span></span><br></pre></td></tr></table></figure><p>（1）这里的proxyFactory是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI</span>(<span class="string">"javassist"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create proxy.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invoker</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> proxy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Adaptive</span>(&#123;Constants.PROXY_KEY&#125;)</span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create invoker.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> invoker</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Adaptive</span>(&#123;Constants.PROXY_KEY&#125;)</span><br><span class="line">    &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">getInvoker</span><span class="params">(T proxy, Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出proxyFactory是一个代理，作用是获取一个接口的代理类，例如获取一个远程接口的代理。</p><p> getInvoker：针对server端，将服务对象，如DemoServiceImpl包装成一个Invoker对象。</p><p> getProxy：针对client端，创建接口的代理对象，例如DemoService的接口。</p><p>（2）上面还出现了Wrapper，这个又是做什么的？</p><p>它类似spring的BeanWrapper，它就是包装了一个接口或一个类，可以通过wrapper对实例对象进行赋值、取值以及指定方法的调用。</p><p>（3）Invoker</p><p>Invoker：它是一个可执行的对象，能够根据方法的名称、参数得到相应的执行结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">它里面有一个很重要的方法 <span class="function">Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span>，</span></span><br><span class="line"><span class="function">Invocation是包含了需要执行的方法和参数等重要信息，目前它只有2个实现类RpcInvocation MockInvocation</span></span><br><span class="line"><span class="function">它有3种类型的Invoker</span></span><br><span class="line"><span class="function">1.本地执行类的Invoker</span></span><br><span class="line"><span class="function">server端：要执行 demoService.sayHello，就通过InjvmExporter来进行反射执行demoService.sayHello就可以了。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2.远程通信类的Invoker</span></span><br><span class="line"><span class="function">client端：要执行 demoService.sayHello，它封装了DubboInvoker进行远程通信，发送要执行的接口给server端。</span></span><br><span class="line"><span class="function">server端：采用了AbstractProxyInvoker执行了DemoServiceImpl.sayHello,然后将执行结果返回发送给client.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3.多个远程通信执行类的Invoker聚合成集群版的Invoker</span></span><br><span class="line"><span class="function">client端：要执行 demoService.sayHello，就要通过AbstractClusterInvoker来进行负载均衡，DubboInvoker进行远程通信，发送要执行的接口给server端。</span></span><br><span class="line"><span class="function">server端：采用了AbstractProxyInvoker执行了DemoServiceImpl.sayHello,然后将执行结果返回发送给client.</span></span><br></pre></td></tr></table></figure><h3 id="远程暴露"><a href="#远程暴露" class="headerlink" title="远程暴露"></a>远程暴露</h3><p>远程暴露过程中使用Netty进行通信。接着前面分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果配置不是local则暴露为远程服务.(配置为local，则表示只暴露本地服务)</span></span><br><span class="line">          --&gt;proxyFactory.getInvoker<span class="comment">//原理和本地暴露一样都是为了获取一个Invoker对象</span></span><br><span class="line">          --&gt;protocol.export(invoker) <span class="comment">//invoker: "registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=demo-provider&amp;dubbo=2.0.0&amp;export=dubbo%3A%2F%2F10.168.18.162%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider%26dubbo%3D2.0.0%26generic%3Dfalse%26interface%3Dcom.alibaba.dubbo.demo.DemoService%26loadbalance%3Droundrobin%26methods%3DsayHello%26owner%3Dwilliam%26pid%3D6948%26side%3Dprovider%26timestamp%3D1519691944112&amp;owner=william&amp;pid=6948&amp;registry=zookeeper&amp;timestamp=1519691944048"</span></span><br><span class="line">            --&gt;Protocol$Adpative.export(invoker)</span><br><span class="line">              --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(<span class="string">"registry"</span>);</span><br><span class="line">            --&gt;extension.export(arg0)</span><br><span class="line">              --&gt;ProtocolFilterWrapper.export(Invoker&lt;T&gt; invoker)</span><br><span class="line">                --&gt;ProtocolListenerWrapper.export(Invoker&lt;T&gt; invoker)</span><br><span class="line">                  --&gt;RegistryProtocol.export(<span class="keyword">final</span> Invoker&lt;T&gt; originInvoker)</span><br><span class="line">                    --&gt;doLocalExport(<span class="keyword">final</span> Invoker&lt;T&gt; originInvoker)</span><br><span class="line">                      --&gt;getCacheKey(originInvoker);<span class="comment">//读取 dubbo://127.0.0.1:20880/</span></span><br><span class="line">                      --&gt;protocol.export(invokerDelegete)</span><br><span class="line">                        --&gt;Protocol$Adpative.export(com.alibaba.dubbo.rpc.Invoker arg0)</span><br><span class="line">                          --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(<span class="string">"dubbo"</span>);</span><br><span class="line">                          --&gt;extension.export(arg0)</span><br><span class="line">                            --&gt;ProtocolFilterWrapper.export(Invoker&lt;T&gt; invoker)</span><br><span class="line">                              --&gt;buildInvokerChain(invoker, Constants.SERVICE_FILTER_KEY, Constants.PROVIDER)<span class="comment">//创建8个filter</span></span><br><span class="line">                              --&gt;ProtocolListenerWrapper.export(Invoker&lt;T&gt; invoker)</span><br><span class="line">                                    --&gt;DubboProtocol.export(Invoker&lt;T&gt; invoker)  <span class="comment">//------------1.netty服务暴露的开始</span></span><br><span class="line">                                  --&gt;serviceKey(url)<span class="comment">//组装key=com.alibaba.dubbo.demo.DemoService:20880</span></span><br><span class="line">                                  --&gt;目的：exporterMap.put(key, exporter); <span class="comment">//key=com.alibaba.dubbo.demo.DemoService:20880, exporter=DubboExporter</span></span><br><span class="line">                                  --&gt;openServer(url)</span><br><span class="line">                                    --&gt;createServer(url)</span><br><span class="line">                                          --&gt;Exchangers.bind(url, requestHandler)<span class="comment">//------------2.信息交换层exchanger开始</span></span><br><span class="line">                                        --&gt;getExchanger(url)</span><br><span class="line">                                          --&gt;getExchanger(type)</span><br><span class="line">                                            --&gt;ExtensionLoader.getExtensionLoader(Exchanger.class).getExtension(<span class="string">"header"</span>)</span><br><span class="line">                                        --&gt;HeaderExchanger.bind(URL url, ExchangeHandler handler)</span><br><span class="line">                                          --&gt;Transporters.bind(url, <span class="keyword">new</span> DecodeHandler(<span class="keyword">new</span> HeaderExchangeHandler(handler)))</span><br><span class="line">                                            --&gt;<span class="keyword">new</span> HeaderExchangeHandler(handler)<span class="comment">//this.handler = handler</span></span><br><span class="line">                                            --&gt;<span class="keyword">new</span> DecodeHandler</span><br><span class="line">                                            --&gt;<span class="keyword">new</span> AbstractChannelHandlerDelegate<span class="comment">//this.handler = handler;</span></span><br><span class="line">                                                --&gt;Transporters.bind(URL url, ChannelHandler... handlers)<span class="comment">//----3.网络传输层 transporter</span></span><br><span class="line">                                              --&gt;getTransporter()</span><br><span class="line">                                                --&gt;ExtensionLoader.getExtensionLoader(Transporter.class).getAdaptiveExtension()</span><br><span class="line">                                              --&gt;Transporter$Adpative.bind</span><br><span class="line">                                                --&gt;ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(<span class="string">"netty"</span>);</span><br><span class="line">                                                --&gt;extension.bind(arg0, arg1)</span><br><span class="line">                                                  --&gt;NettyTransporter.bind(URL url, ChannelHandler listener)</span><br><span class="line">                                                    --<span class="keyword">new</span> NettyServer(url, listener)</span><br><span class="line">                                                      --&gt;AbstractPeer <span class="comment">//this.url = url;    this.handler = handler;</span></span><br><span class="line">                                                      --&gt;AbstractEndpoint<span class="comment">//codec  timeout=1000  connectTimeout=3000</span></span><br><span class="line">                                                      --&gt;AbstractServer <span class="comment">//bindAddress accepts=0 idleTimeout=600000</span></span><br><span class="line">                                                          --&gt;doOpen()  <span class="comment">//---------------4.打开连接，暴露netty服务</span></span><br><span class="line">                                                        --&gt;设置 NioServerSocketChannelFactory boss worker的线程池 线程个数为<span class="number">3</span></span><br><span class="line">                                                        --&gt;设置编解码 hander</span><br><span class="line">                                                        --&gt;bootstrap.bind(getBindAddress())</span><br><span class="line">                                          --&gt;<span class="keyword">new</span> HeaderExchangeServer</span><br><span class="line">                                            --&gt;<span class="keyword">this</span>.server=NettyServer</span><br><span class="line">                                            --&gt;heartbeat=<span class="number">60000</span></span><br><span class="line">                                            --&gt;heartbeatTimeout=<span class="number">180000</span></span><br><span class="line">                                            --&gt;startHeatbeatTimer()<span class="comment">//这是一个心跳定时器，采用了线程池，如果断开就心跳重连。</span></span><br></pre></td></tr></table></figure><p>①Protocol</p><p>1.export：暴露远程服务（用于服务端），就是将proxyFactory.getInvoker创建的代理类 invoker对象，通过协议暴露给外部。</p><p>2.refer：引用远程服务（用于客户端）， 通过proxyFactory.getProxy来创建远程的动态代理类，例如DemoService的远程动态接口。</p><p>②exporter：维护invoker的生命周期。</p><p>③exchanger：信息交换层，封装请求响应模式，同步转异步。</p><p>④transporter：网络传输层，用来抽象netty和mina的统一接口。</p><p><strong>接着前面Netty分析之后，来分析Dubbo中的Zookeeper使用机制。</strong></p><p>关注如下三个问题：</p><p>①dubbo如何连接zookeeper？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">         --&gt;getRegistry(originInvoker)<span class="comment">//连接zookeeper</span></span><br><span class="line">           --&gt;registryFactory.getRegistry(registryUrl)</span><br><span class="line">             --&gt;ExtensionLoader.getExtensionLoader(RegistryFactory.class).getExtension(<span class="string">"zookeeper"</span>);</span><br><span class="line">             --&gt;extension.getRegistry(arg0)</span><br><span class="line">               --&gt;AbstractRegistryFactory.getRegistry<span class="comment">//创建一个注册中心，存储在REGISTRIES</span></span><br><span class="line">                 --&gt;createRegistry(url)</span><br><span class="line">                   --&gt;<span class="keyword">new</span> ZookeeperRegistry(url, zookeeperTransporter)</span><br><span class="line">                     --&gt;AbstractRegistry(URL url)</span><br><span class="line">                       --&gt;loadProperties()<span class="comment">//目的：把C:\Users\dongqiang\.dubbo\dubbo-registry-127.0.0.1.cache 文件中的内容加载为properties</span></span><br><span class="line">                       --&gt;notify(url.getBackupUrls())<span class="comment">//不做任何事             </span></span><br><span class="line">                     --&gt;FailbackRegistry   </span><br><span class="line">                       --&gt;retryExecutor.scheduleWithFixedDelay(<span class="keyword">new</span> Runnable()<span class="comment">//建立线程池，检测并连接注册中心,如果失败了就重连</span></span><br><span class="line">                     --&gt;ZookeeperRegistry</span><br><span class="line">                       --&gt;zookeeperTransporter.connect(url)</span><br><span class="line">                         --&gt;ZookeeperTransporter$Adpative.connect(url)</span><br><span class="line">                           --&gt;ExtensionLoader.getExtensionLoader(ZookeeperTransporter.class).getExtension(<span class="string">"zkclient"</span>);</span><br><span class="line">                           --&gt;extension.connect(arg0)</span><br><span class="line">                             --&gt;ZkclientZookeeperTransporter.connect(URL url)</span><br><span class="line">                               --&gt;<span class="keyword">new</span> ZkclientZookeeperClient(url)</span><br><span class="line">                                 --&gt;调用<span class="keyword">super</span>: AbstractZookeeperClient(URL url)</span><br><span class="line">--&gt;<span class="keyword">new</span> ZkClient(url.getBackupAddress());<span class="comment">//连接ZK</span></span><br><span class="line">                                 --&gt;client.subscribeStateChanges(<span class="keyword">new</span> IZkStateListener()<span class="comment">//订阅的目的：连接断开时重连</span></span><br><span class="line">                       --&gt;zkClient.addStateListener(<span class="keyword">new</span> StateListener() </span><br><span class="line">                         --&gt;recover <span class="comment">//连接失败时重连</span></span><br></pre></td></tr></table></figure><p>②dubbo如何创建zookeeper节点？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--&gt;registry.register(registedProviderUrl)<span class="comment">//创建节点</span></span><br><span class="line">  --&gt;AbstractRegistry.register</span><br><span class="line">  --&gt;FailbackRegistry.register</span><br><span class="line">    --&gt;doRegister(url)<span class="comment">//向zk服务器端发送注册请求</span></span><br><span class="line">      --&gt;ZookeeperRegistry.doRegister(URL url)</span><br><span class="line">        --&gt;zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, <span class="keyword">true</span>))</span><br><span class="line">          --&gt;AbstractZookeeperClient.create<span class="comment">///dubbo/com.alibaba.dubbo.demo.DemoService/providers/dubbo%3A%2F%2F10.168.18.162%3A20880%2Fcom.alibaba.dubbo.demo.DemoService%3Fanyhost%3Dtrue%26application%3Ddemo-provider%26dubbo%3D2.0.0%26generic%3Dfalse%26interface%3Dcom.alibaba.dubbo.demo.DemoService%26loadbalance%3Droundrobin%26methods%3DsayHello%26owner%3Dwilliam%26pid%3D7832%26side%3Dprovider%26timestamp%3D1519804577146</span></span><br><span class="line">            --&gt;createEphemeral(path);<span class="comment">//临时节点  dubbo%3A%2F%2F10.168.18.162%3A20880%2F.............</span></span><br><span class="line">            --&gt;createPersistent(path);<span class="comment">//持久化节点 dubbo/com.alibaba.dubbo.demo.DemoService/providers</span></span><br></pre></td></tr></table></figure><p>zk持久化节点和临时节点有什么区别？</p><p>持久化节点：一旦被创建，除非主动删除掉，否则就一直存储在zk里面。</p><p>临时节点：与客户端会话绑定，一旦客户端会话失效，这个客户端端所创建的所有临时节点都会被删除。Dubbo对注册的服务使用临时节点，保证服务断掉时节点自动被移除，以免订阅者一直订阅。比如服务端已经挂了，但是在Zk中仍然存在，那么客户端还是会去请求和监听，那么会一直失败。</p><p>③dubbo如何订阅zookeeper信息？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">                --&gt;registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);<span class="comment">//订阅ZK</span></span><br><span class="line">                  --&gt;AbstractRegistry.subscribe</span><br><span class="line">                  --&gt;FailbackRegistry.subscribe</span><br><span class="line">                    --&gt;doSubscribe(url, listener)<span class="comment">// 向服务器端发送订阅请求</span></span><br><span class="line">                      --&gt;ZookeeperRegistry.doSubscribe(<span class="keyword">final</span> URL url, <span class="keyword">final</span> NotifyListener listener)</span><br><span class="line">                        --&gt;<span class="keyword">new</span> ChildListener() &#123;</span><br><span class="line">--&gt;实现childChanged(String parentPath, List&lt;String&gt; currentChilds)</span><br><span class="line">   --&gt;实现并执行ZookeeperRegistry.<span class="keyword">this</span>.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds));</span><br><span class="line">                          <span class="comment">//A</span></span><br><span class="line">                        --&gt;zkClient.create(path, <span class="keyword">false</span>);<span class="comment">//第一步：先创建持久化节点/dubbo/com.alibaba.dubbo.demo.DemoService/configurators</span></span><br><span class="line">                        --&gt;zkClient.addChildListener(path, zkListener)</span><br><span class="line">                          --&gt;AbstractZookeeperClient.addChildListener(path, listener)</span><br><span class="line">                            <span class="comment">//C</span></span><br><span class="line">                            --&gt;createTargetChildListener(path, listener)<span class="comment">//第三步：收到订阅后的处理，交给FailbackRegistry.notify处理</span></span><br><span class="line">                              --&gt;ZkclientZookeeperClient.createTargetChildListener(String path, <span class="keyword">final</span> ChildListener listener)</span><br><span class="line">                                --&gt;<span class="keyword">new</span> IZkChildListener() </span><br><span class="line">                                  --&gt;实现了 handleChildChange <span class="comment">//收到订阅后的处理</span></span><br><span class="line">                                  --&gt;listener.childChanged(parentPath, currentChilds);</span><br><span class="line">                                  --&gt;实现并执行ZookeeperRegistry.<span class="keyword">this</span>.notify(url, listener, toUrlsWithEmpty(url, parentPath, currentChilds));</span><br><span class="line">                                  --&gt;收到订阅后处理 FailbackRegistry.notify</span><br><span class="line">                            <span class="comment">//B      </span></span><br><span class="line">                            --&gt;addTargetChildListener(path, targetListener)<span class="comment">////第二步</span></span><br><span class="line">                              --&gt;ZkclientZookeeperClient.addTargetChildListener</span><br><span class="line">                                --&gt;client.subscribeChildChanges(path, listener)<span class="comment">//第二步：启动加入订阅/dubbo/com.alibaba.dubbo.demo.DemoService/configurators</span></span><br></pre></td></tr></table></figure><p>最后再跟一下notify的处理流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--&gt;notify(url, listener, urls)</span><br><span class="line">  --&gt;FailbackRegistry.notify</span><br><span class="line">    --&gt;doNotify(url, listener, urls);</span><br><span class="line">      --&gt;AbstractRegistry.notify</span><br><span class="line">        --&gt;saveProperties(url);<span class="comment">//把服务端的注册url信息更新到C:\Users\dongqiang\.dubbo\dubbo-registry-192.168.48.117.cache</span></span><br><span class="line">          --&gt;registryCacheExecutor.execute(<span class="keyword">new</span> SaveProperties(version));<span class="comment">//采用线程池来处理</span></span><br><span class="line">        --&gt;listener.notify(categoryList)</span><br><span class="line">          --&gt;RegistryProtocol.notify</span><br><span class="line">            --&gt;RegistryProtocol.<span class="keyword">this</span>.getProviderUrl(originInvoker)<span class="comment">//通过invoker的url 获取 providerUrl的地址</span></span><br></pre></td></tr></table></figure><p>整个服务发布流程如下：</p><p><img src="/2018/10/03/Dubbo服务发布原理/export.PNG" alt="export"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h3&gt;&lt;p&gt;修改dubbo-demo子项目的dubbo-demo-provider模块的main/resources/dubbo-demo-provider.x
      
    
    </summary>
    
      <category term="Dubbo" scheme="https://hnxydq.github.io/categories/Dubbo/"/>
    
    
      <category term="源码分析" scheme="https://hnxydq.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo的动态编译</title>
    <link href="https://hnxydq.github.io/2018/10/02/Dubbo%E7%9A%84%E5%8A%A8%E6%80%81%E7%BC%96%E8%AF%91/"/>
    <id>https://hnxydq.github.io/2018/10/02/Dubbo的动态编译/</id>
    <published>2018-10-02T13:33:20.000Z</published>
    <updated>2018-10-02T13:33:36.254Z</updated>
    
    <content type="html"><![CDATA[<p>前面分析SPI机制时，提到createAdaptiveExtensionClass()自动生成和编译一个动态的adpative类。</p><p>Compiler的类继承关系：</p><p><img src="/2018/10/02/Dubbo的动态编译/compiler_hierarchy.PNG" alt="compiler_hierarchy"></p><p>在Dubbo实现中，默认使用JavassistCompiler进行动态编译，不使用JdKComplier。这一点从Compiler接口的实现中可以看出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI</span>(<span class="string">"javassist"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Compiler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Compile java source code.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code        Java source code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classLoader TODO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Compiled class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt; compile(String code, ClassLoader classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里使用了@SPI注解，指定了使用javassist。</p><p>回顾前面的调用流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--&gt;createAdaptiveExtensionClass()</span><br><span class="line">--&gt;createAdaptiveExtensionClassCode()</span><br><span class="line">--&gt;com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();</span><br><span class="line">--&gt;compiler.compile(code, classLoader)</span><br><span class="line">      --&gt;AdaptiveCompiler.compile(code, classLoader)</span><br><span class="line">      --&gt;AbstractCompiler.compile(code, classLoader) </span><br><span class="line">      --&gt;Class&lt;?&gt; doCompile(String name, String source)</span><br><span class="line">      --&gt;JavassistCompiler.doCompile(String name, String source) </span><br><span class="line">      --&gt;cls.toClass(ClassHelper.getCallerClassLoader(getClass()), JavassistCompiler.class.getProtectionDomain());<span class="comment">//编译成class返回</span></span><br></pre></td></tr></table></figure><p>根据前面分析SPI机制时得出的结论：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getExtensionLoader(Class&lt;T&gt; type) 就是为该接口new 一个ExtensionLoader，然后缓存起来。</span><br><span class="line">getAdaptiveExtension() 获取一个扩展类，如果@Adaptive注解在类上就是一个装饰类；如果注解在方法上就是一个动态代理类，例如Protocol$Adaptive对象。</span><br><span class="line">getExtension(String name) 获取一个指定对象。</span><br></pre></td></tr></table></figure><p>这里首先为Compiler接口创建了一个ExtensionLoader。然后调用getAdaptiveExtension()获取扩展类。那么这个Compiler是一个装饰类还是一个动态代理类？从上面的Compiler接口的定义并不能看出，跟进compile()方法来看:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Adaptive</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdaptiveCompiler</span> <span class="keyword">implements</span> <span class="title">Compiler</span></span></span><br></pre></td></tr></table></figure><p>所以Compiler是一个装饰类。</p><p>接着看createAdaptiveExtensionClass()具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;?&gt; createAdaptiveExtensionClass() &#123;</span><br><span class="line">        String code = createAdaptiveExtensionClassCode();</span><br><span class="line">        ClassLoader classLoader = findClassLoader();</span><br><span class="line">        com.alibaba.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();</span><br><span class="line">        <span class="keyword">return</span> compiler.compile(code, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会执行到AdaptiveCompiler的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Adaptive</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdaptiveCompiler</span> <span class="keyword">implements</span> <span class="title">Compiler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> String DEFAULT_COMPILER;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDefaultCompiler</span><span class="params">(String compiler)</span> </span>&#123;</span><br><span class="line">        DEFAULT_COMPILER = compiler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; compile(String code, ClassLoader classLoader) &#123;</span><br><span class="line">        Compiler compiler;</span><br><span class="line">        ExtensionLoader&lt;Compiler&gt; loader = ExtensionLoader.getExtensionLoader(Compiler.class);</span><br><span class="line">        String name = DEFAULT_COMPILER; <span class="comment">// copy reference</span></span><br><span class="line">        <span class="keyword">if</span> (name != <span class="keyword">null</span> &amp;&amp; name.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            compiler = loader.getExtension(name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            compiler = loader.getDefaultExtension();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> compiler.compile(code, classLoader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里DEFAULT_COMPILER执行compile时并未赋值，所以会执行else分支，这里最终会根据@SPI(“javassist”)获取JavassistCompiler。然后使用其compile()进行编译code，这里会调用到抽象类AbstractCompiler的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCompiler</span> <span class="keyword">implements</span> <span class="title">Compiler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PACKAGE_PATTERN = Pattern.compile(<span class="string">"package\\s+([$_a-zA-Z][$_a-zA-Z0-9\\.]*);"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern CLASS_PATTERN = Pattern.compile(<span class="string">"class\\s+([$_a-zA-Z][$_a-zA-Z0-9]*)\\s+"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; compile(String code, ClassLoader classLoader) &#123;</span><br><span class="line">        code = code.trim();</span><br><span class="line">        Matcher matcher = PACKAGE_PATTERN.matcher(code);</span><br><span class="line">        String pkg;</span><br><span class="line">        <span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line">            pkg = matcher.group(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pkg = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        matcher = CLASS_PATTERN.matcher(code);</span><br><span class="line">        String cls;</span><br><span class="line">        <span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line">            cls = matcher.group(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No such class name in "</span> + code);</span><br><span class="line">        &#125;</span><br><span class="line">        String className = pkg != <span class="keyword">null</span> &amp;&amp; pkg.length() &gt; <span class="number">0</span> ? pkg + <span class="string">"."</span> + cls : cls;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Class.forName(className, <span class="keyword">true</span>, ClassHelper.getCallerClassLoader(getClass()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!code.endsWith(<span class="string">"&#125;"</span>)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The java code not endsWith \"&#125;\", code: \n"</span> + code + <span class="string">"\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> doCompile(className, code);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException t) &#123;</span><br><span class="line">                <span class="keyword">throw</span> t;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to compile class, cause: "</span> + t.getMessage() + <span class="string">", class: "</span> + className + <span class="string">", code: \n"</span> + code + <span class="string">"\n, stack: "</span> + ClassUtils.toString(t));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> Class&lt;?&gt; doCompile(String name, String source) <span class="keyword">throws</span> Throwable;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中首先会去使用类加载器Class.forName去加载目标类，如果类本身（如动态代理类$Adaptive）不存在则会走到异常处理代码，doCompile()这里会调用到JavassistCompiler的具体实现。</p><p>在该类中最后会返回编译的class：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cls.toClass(ClassHelper.getCallerClassLoader(getClass()), JavassistCompiler.class.getProtectionDomain());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面分析SPI机制时，提到createAdaptiveExtensionClass()自动生成和编译一个动态的adpative类。&lt;/p&gt;
&lt;p&gt;Compiler的类继承关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/10/02/Dubbo的动态编译/compiler
      
    
    </summary>
    
      <category term="Dubbo" scheme="https://hnxydq.github.io/categories/Dubbo/"/>
    
    
      <category term="源码分析" scheme="https://hnxydq.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo之Spi机制分析</title>
    <link href="https://hnxydq.github.io/2018/10/02/Dubbo%E4%B9%8BSpi%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/"/>
    <id>https://hnxydq.github.io/2018/10/02/Dubbo之Spi机制分析/</id>
    <published>2018-10-02T08:47:38.000Z</published>
    <updated>2018-10-02T09:27:17.496Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Dubbo内核"><a href="#一、Dubbo内核" class="headerlink" title="一、Dubbo内核"></a>一、Dubbo内核</h3><p>Dubbo内核主要包含SPI、AOP、IOC、Compiler。</p><h3 id="二、JDK的SPI"><a href="#二、JDK的SPI" class="headerlink" title="二、JDK的SPI"></a>二、JDK的SPI</h3><p>1.spi的设计目标： </p><p>面向对象的设计里，模块之间是基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可插拔的原则，如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候，不在模块里写死代码，就需要一种服务发现机制。Java SPI就提供了这样一种机制：为某个接口寻找服务实现，有点类似IOC思想，将装配的控制权移到代码之外。</p><p>2.JDK的SPI的默认约定</p><p>当服务的提供者提供了一个接口的多种实现时，一般会在jar包的META-INF/services目录下，创建该接口的同名文件，文件的内容就是该服务接口的具体实现类的全类名。</p><h3 id="三、Dubbo为什么不采用JDK的SPI"><a href="#三、Dubbo为什么不采用JDK的SPI" class="headerlink" title="三、Dubbo为什么不采用JDK的SPI"></a>三、Dubbo为什么不采用JDK的SPI</h3><p>JDK标准的SPI会一次性实例化扩展点所有实现，如果有扩展实现初始化很耗时。但如果没用上也加载，会很浪费资源。针对这个问题，Dubbo增加了对扩展点IoC和AOP的支持，一个扩展点可以直接setter注入其它扩展点。</p><h3 id="四、Dubbo-SPI的默认约定"><a href="#四、Dubbo-SPI的默认约定" class="headerlink" title="四、Dubbo SPI的默认约定"></a>四、Dubbo SPI的默认约定</h3><p>1.spi 文件存储路径在META-INF\dubbo\internal 目录下并且文件名为接口的全路径名。即接口文件的全类名。</p><p>2.每个spi 文件里面的格式定义为： 扩展名=具体的类名，例如 dubbo=com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtoco。使用时通过key加载（如dubbo），可以实现部分加载。</p><h3 id="五、SPI示例"><a href="#五、SPI示例" class="headerlink" title="五、SPI示例"></a>五、SPI示例</h3><p><img src="/2018/10/02/Dubbo之Spi机制分析/spi_1.PNG" alt="spi_1">遵循上述第一条第2点，这里Command为接口文件，其中StartCommand和ShutdownCommand为两个实现类。需要在resources目录下建META-INF子目录，在META-INF下建services目录，然后以接口全路径作为文件名创建文件，内容为接口实现类的全类型名。</p><p>Command.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dongqiang.soa.spi;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by qiangdong on 2018/2/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StartCommand.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dongqiang.soa.spi;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by qiangdong on 2018/2/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start command."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ShutdownCommand.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dongqiang.soa.spi;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by qiangdong on 2018/2/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShutdownCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ShutdownCommand"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dongqiang.soa.spi;</span><br><span class="line"><span class="keyword">import</span> java.util.ServiceLoader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by qiangdong on 2018/2/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServiceLoader&lt;Command&gt; serviceLoader = ServiceLoader.load(Command.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Command command : serviceLoader) &#123;</span><br><span class="line">            command.execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、结合Dubbo源码分析Spi"><a href="#六、结合Dubbo源码分析Spi" class="headerlink" title="六、结合Dubbo源码分析Spi"></a>六、结合Dubbo源码分析Spi</h3><p>如前所说，Dubbo SPI的目的是获取一个指定实现类的对象。那么Dubbo是通过什么方式获取的呢？其实是调用ExtensionLoader.getExtension(String name)实现。</p><p>具体实现途径有三种：</p><p>①getExtensionLoader(Class<t> type)    为type接口new一个ExtensionLoader，然后缓存起来。</t></p><p>②getAdaptiveExtension()   获取一个扩展装饰类的对象，这个类有一个规则，如果它没有@Adaptive注解，就动态创建一个装饰类，例如Protocol$Adaptive对象。</p><p>③getExtension(String name)    获取一个指定对象。</p><p>（1）分析ExtensionLoader.getExtensionLoader(Class<t> type)</t></p><p>Dubbo的第一行代码在哪里？</p><p>idea导入Dubbo源码，在子模块dubbo-demo-provider/src/test下有DemoProvider.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.demo.provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        com.alibaba.dubbo.container.Main.main(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里便是代码的入口。</p><p>这里调到com.alibaba.dubbo.container.Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.container;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.Constants;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.extension.ExtensionLoader;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.logger.Logger;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.logger.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.utils.ConfigUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Main. (API, Static, ThreadSafe)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> william.liangf</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTAINER_KEY = <span class="string">"dubbo.container"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SHUTDOWN_HOOK_KEY = <span class="string">"dubbo.shutdown.hook"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Main.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExtensionLoader&lt;Container&gt; loader = ExtensionLoader.getExtensionLoader(Container.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (args == <span class="keyword">null</span> || args.length == <span class="number">0</span>) &#123;</span><br><span class="line">                String config = ConfigUtils.getProperty(CONTAINER_KEY, loader.getDefaultExtensionName());</span><br><span class="line">                args = Constants.COMMA_SPLIT_PATTERN.split(config);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> List&lt;Container&gt; containers = <span class="keyword">new</span> ArrayList&lt;Container&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                containers.add(loader.getExtension(args[i]));</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(<span class="string">"Use container type("</span> + Arrays.toString(args) + <span class="string">") to run dubbo serivce."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"true"</span>.equals(System.getProperty(SHUTDOWN_HOOK_KEY))) &#123;</span><br><span class="line">                Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">for</span> (Container container : containers) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                container.stop();</span><br><span class="line">                                logger.info(<span class="string">"Dubbo "</span> + container.getClass().getSimpleName() + <span class="string">" stopped!"</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                                logger.error(t.getMessage(), t);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">synchronized</span> (Main.class) &#123;</span><br><span class="line">                                running = <span class="keyword">false</span>;</span><br><span class="line">                                Main.class.notify();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Container container : containers) &#123;</span><br><span class="line">                container.start();</span><br><span class="line">                logger.info(<span class="string">"Dubbo "</span> + container.getClass().getSimpleName() + <span class="string">" started!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"[yyyy-MM-dd HH:mm:ss]"</span>).format(<span class="keyword">new</span> Date()) + <span class="string">" Dubbo service server started!"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            logger.error(e.getMessage(), e);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (Main.class) &#123;</span><br><span class="line">            <span class="keyword">while</span> (running) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Main.class.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，Main类中定义了一系列的静态成员变量，其中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExtensionLoader&lt;Container&gt; loader = ExtensionLoader.getExtensionLoader(Container.class);</span><br></pre></td></tr></table></figure><p>在Main类初始化阶段调用了上述第①条方式为Container创建扩展点。</p><p>通过断点跟进getExtensionLoader方法，会进行new ExtensionLoader<t>(type)构造：</t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ExtensionLoader</span><span class="params">(Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        objectFactory = (type == ExtensionFactory.class ? <span class="keyword">null</span> : ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里会进一步调用getExtensionLoader方法，只是这次传入的是ExtensionFactory.class。通过上面的代码知道，等价于如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.type = type;</span><br><span class="line">objectFactory = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>执行以上代码完成了2个属性的初始化：</p><p>1.每个ExtensionLoader都包含了2个值： type 和 objectFactory</p><p>  Class&lt;?&gt; type；//构造器初始化时要得到的接口名</p><p>  ExtensionFactory objectFactory//构造器初始化时设置为AdaptiveExtensionFactory，Dubbo内部默认的实现是SpiExtensionFactory和SpringExtensionFactory。</p><p>2.new 一个ExtensionLoader 存储在ConcurrentMap&lt;Class&lt;?&gt;, ExtensionLoader&lt;?&gt;&gt; EXTENSION_LOADERS里。</p><p><strong>关于objectFactory</strong></p><p>1.objectFactory就是ExtensionFactory，它也是通过ExtensionLoader.getExtensionLoader(ExtensionFactory.class)来实现的，但是它的objectFactory=null</p><p>2.objectFactory作用，它就是为dubbo的IOC提供所有对象。</p><p>（2）分析getAdaptiveExtension()</p><p>为什么要设计Adaptive？</p><p>Adaptive注解在类和方法上有什么区别？</p><p>①注解在类上，代表人工实现编码，即实现了一个装饰类，如ExtensionFactory。</p><p>②注解在方法上，代表自动生成和编译一个动态的adaptive类，如Protocol$Adaptive。</p><p>接下来从子模块dubbo-config-spring下的schema包的DubboNamespaceHandler开始分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.config.spring.schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.Version;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.ApplicationConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.ModuleConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.MonitorConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.ProtocolConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.ProviderConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.RegistryConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.spring.AnnotationBean;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.spring.ReferenceBean;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.spring.ServiceBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.NamespaceHandlerSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DubboNamespaceHandler</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> william.liangf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@export</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Version.checkDuplicate(DubboNamespaceHandler.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"application"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ApplicationConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"module"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ModuleConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"registry"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(RegistryConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"monitor"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(MonitorConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"provider"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProviderConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"consumer"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ConsumerConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"protocol"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ProtocolConfig.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"service"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ServiceBean.class, <span class="keyword">true</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"reference"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ReferenceBean.class, <span class="keyword">false</span>));</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"annotation"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(AnnotationBean.class, <span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registerBeanDefinitionParser(<span class="string">"service"</span>, <span class="keyword">new</span> DubboBeanDefinitionParser(ServiceBean.class, <span class="keyword">true</span>));</span><br></pre></td></tr></table></figure><p>这里ServiceBean继承自ServiceConfig类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceConfig</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractServiceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3033787999037024738L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里通过getAdaptiveExtension()获取protocol。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--&gt;getAdaptiveExtension()<span class="comment">//为cachedAdaptiveInstance赋值</span></span><br><span class="line">  --&gt;createAdaptiveExtension()</span><br><span class="line">    --&gt;getAdaptiveExtensionClass()<span class="comment">//该方法看出，如果是预定义的类就直接返回，不然动态生成适配类</span></span><br><span class="line">      --&gt;getExtensionClasses()<span class="comment">//为cachedClasses 赋值</span></span><br><span class="line">        --&gt;loadExtensionClasses()</span><br><span class="line">          --&gt;loadFile(..)</span><br><span class="line">      --&gt;createAdaptiveExtensionClass()<span class="comment">//自动生成和编译一个动态的adpative类，这个类是一个代理类</span></span><br><span class="line">        --&gt;ExtensionLoader.getExtensionLoader</span><br><span class="line">                  (com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension()</span><br><span class="line">        --&gt;compiler.compile(code, classLoader)</span><br><span class="line">    --&gt;injectExtension()<span class="comment">//作用：进入IOC的反转控制模式，实现了动态注入</span></span><br></pre></td></tr></table></figure><p><strong>loadFile(..)方法的作用</strong>：把SPI配置文件（如META-INF/dubbo/internal/com.alibaba.dubbo.rpc.Protocol）的内容，存储在缓存变量里。使用了四个缓存变量。</p><p>①缓存包含Adaptive注解的类</p><p>cachedAdaptiveClass 如果这个Class含有adaptive注解就赋值进去，如ExtensionFactory有，而Protocol没有。</p><p>②缓存无Adaptive注解的封装类</p><p>cachedWrapperClasses 只有当该class无adaptive注解，并且构造方法参数为目标接口(type，如Protocol)类型，如Protocol里的SPI就只有ProtocolFilterWrapper和ProtocolListenerWrapper能命中，如下例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolFilterWrapper</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Protocol protocol;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProtocolFilterWrapper</span><span class="params">(Protocol protocol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (protocol == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"protocol == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.protocol = protocol;</span><br><span class="line">    &#125;</span><br><span class="line">  。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③cachedActivates 剩下的包含Activate注解的类</p><p>④cachedName  剩下的类存储在该map中</p><p>在loadExtensionClasses()方法中，有三处loadFile()加载SPI文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; loadExtensionClasses() &#123;</span><br><span class="line">        <span class="keyword">final</span> SPI defaultAnnotation = type.getAnnotation(SPI.class);</span><br><span class="line">        <span class="keyword">if</span> (defaultAnnotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String value = defaultAnnotation.value();</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; (value = value.trim()).length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String[] names = NAME_SEPARATOR.split(value);</span><br><span class="line">                <span class="keyword">if</span> (names.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"more than 1 default extension name on extension "</span> + type.getName()</span><br><span class="line">                            + <span class="string">": "</span> + Arrays.toString(names));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (names.length == <span class="number">1</span>) cachedDefaultName = names[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; extensionClasses = <span class="keyword">new</span> HashMap&lt;String, Class&lt;?&gt;&gt;();</span><br><span class="line">        loadFile(extensionClasses, DUBBO_INTERNAL_DIRECTORY);</span><br><span class="line">        loadFile(extensionClasses, DUBBO_DIRECTORY);</span><br><span class="line">        loadFile(extensionClasses, SERVICES_DIRECTORY);</span><br><span class="line">        <span class="keyword">return</span> extensionClasses;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里的三处loadFile()实际上起到真正作用的是第一个：路径为META-INF/dubbo/internal/，这个打开dubbo.jar即可看到，这里仍然看com.alibaba.dubbo.rpc.Protocol这个SPI文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">registry=com.alibaba.dubbo.registry.integration.RegistryProtocol</span><br><span class="line">dubbo=com.alibaba.dubbo.rpc.protocol.dubbo.DubboProtocol</span><br><span class="line">filter=com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper</span><br><span class="line">listener=com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper</span><br><span class="line">mock=com.alibaba.dubbo.rpc.support.MockProtocol</span><br><span class="line">injvm=com.alibaba.dubbo.rpc.protocol.injvm.InjvmProtocol</span><br><span class="line">rmi=com.alibaba.dubbo.rpc.protocol.rmi.RmiProtocol</span><br><span class="line">hessian=com.alibaba.dubbo.rpc.protocol.hessian.HessianProtocol</span><br><span class="line">com.alibaba.dubbo.rpc.protocol.http.HttpProtocol</span><br><span class="line">com.alibaba.dubbo.rpc.protocol.webservice.WebServiceProtocol</span><br><span class="line">thrift=com.alibaba.dubbo.rpc.protocol.thrift.ThriftProtocol</span><br><span class="line">memcached=com.alibaba.dubbo.rpc.protocol.memcached.MemcachedProtocol</span><br><span class="line">redis=com.alibaba.dubbo.rpc.protocol.redis.RedisProtocol</span><br></pre></td></tr></table></figure><p>上面执行compile时，框架会自动生成如下Protocol$Adpative类代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.rpc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.extension.ExtensionLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Protocol</span>$<span class="title">Adpative</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">alibaba</span>.<span class="title">dubbo</span>.<span class="title">rpc</span>.<span class="title">Protocol</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(</span><br><span class="line"><span class="string">"method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDefaultPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(</span><br><span class="line"><span class="string">"method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> com.alibaba.dubbo.rpc.<span class="function">Exporter <span class="title">export</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">com.alibaba.dubbo.rpc.Invoker arg0)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> com.alibaba.dubbo.rpc.RpcException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arg0 == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line"><span class="string">"com.alibaba.dubbo.rpc.Invoker argument == null"</span>);</span><br><span class="line"><span class="keyword">if</span> (arg0.getUrl() == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line"><span class="string">"com.alibaba.dubbo.rpc.Invoker argument getUrl() == null"</span>);</span><br><span class="line">com.alibaba.dubbo.common.URL url = arg0.getUrl();</span><br><span class="line">String extName = (url.getProtocol() == <span class="keyword">null</span> ? <span class="string">"dubbo"</span> : url</span><br><span class="line">.getProtocol());</span><br><span class="line"><span class="keyword">if</span> (extName == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url("</span></span><br><span class="line">+ url.toString() + <span class="string">") use keys([protocol])"</span>);</span><br><span class="line">com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader</span><br><span class="line">.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class)</span><br><span class="line">.getExtension(extName);</span><br><span class="line"><span class="keyword">return</span> extension.export(arg0);<span class="comment">//自己执行自己，说明当前类是一个代理类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> com.alibaba.dubbo.rpc.<span class="function">Invoker <span class="title">refer</span><span class="params">(java.lang.Class arg0,</span></span></span><br><span class="line"><span class="function"><span class="params">com.alibaba.dubbo.common.URL arg1)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> com.alibaba.dubbo.rpc.RpcException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arg1 == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"url == null"</span>);</span><br><span class="line">com.alibaba.dubbo.common.URL url = arg1;</span><br><span class="line">String extName = (url.getProtocol() == <span class="keyword">null</span> ? <span class="string">"dubbo"</span> : url</span><br><span class="line">.getProtocol());</span><br><span class="line"><span class="keyword">if</span> (extName == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url("</span></span><br><span class="line">+ url.toString() + <span class="string">") use keys([protocol])"</span>);</span><br><span class="line">com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol) ExtensionLoader</span><br><span class="line">.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class)</span><br><span class="line">.getExtension(extName);</span><br><span class="line"><span class="keyword">return</span> extension.refer(arg0, arg1);<span class="comment">//自己执行自己，说明当前类是一个代理类</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是根据如下模板生成的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> &lt;扩展点接口所在包&gt;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> &lt;扩展点接口名&gt;$<span class="title">Adpative</span> <span class="keyword">implements</span> &lt;扩展点接口&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;有<span class="meta">@Adaptive</span>注解的接口方法&gt;(&lt;方法参数&gt;) &#123;</span><br><span class="line">        <span class="keyword">if</span>(是否有URL类型方法参数?) 使用该URL参数</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(是否有方法类型上有URL属性) 使用该URL属性</span><br><span class="line">        # &lt;else 在加载扩展点生成自适应扩展点类时抛异常，即加载扩展点失败！&gt;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span>(获取的URL == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"url == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">              根据<span class="meta">@Adaptive</span>注解上声明的Key的顺序，从URL获致Value，作为实际扩展点名。</span><br><span class="line">               如URL没有Value，则使用缺省扩展点实现。如没有扩展点， <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Fail to get extension"</span>);</span><br><span class="line"> </span><br><span class="line">               在扩展点实现调用该方法，并返回结果。</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> &lt;有<span class="meta">@Adaptive</span>注解的接口方法&gt;(&lt;方法参数&gt;) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"is not adaptive method!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结起来，Dubbo的所有对象都是通过ExtensionLoader获取的，SPI是内核。</p><p>（3）分析getExtension(String name)</p><p>为了进一步分析代理类的扩展类对象生成过程，将Protocol$Adpative类手动创建到dubbo源码子模块dubbo-demo下的dubbo-demo-provider中，test目录下新建包com.alibaba.dubbo.rpc。然后将上述代码拷贝其中。</p><p>然后在getExtension(extName)这里设置断点：</p><p><img src="/2018/10/02/Dubbo之Spi机制分析/get_extension_1.PNG" alt="get_extension_1"></p><p>通过断点跟踪，调用链如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--&gt;getExtension(String name) <span class="comment">//指定对象缓存在cachedInstances；get出来的对象可能是wrapper对象，例如protocol就是ProtocolFilterWrapper和ProtocolListenerWrapper其中一个。</span></span><br><span class="line">  --&gt;createExtension(String name)</span><br><span class="line">    --&gt;getExtensionClasses() <span class="comment">//前面已经分析过，就是使用loadFile读取文件并缓存</span></span><br><span class="line">    --&gt;injectExtension(T instance)<span class="comment">//dubbo的IOC反转控制，就是从spi和spring里面提取对象赋值。</span></span><br><span class="line">      --&gt;objectFactory.getExtension(pt, property)<span class="comment">//通过ExtensionFactory获取extension，有两种</span></span><br><span class="line">        --&gt;①SpiExtensionFactory.getExtension(type, name)</span><br><span class="line">          --&gt;ExtensionLoader.getExtensionLoader(type)</span><br><span class="line">          --&gt;loader.getAdaptiveExtension()</span><br><span class="line">        --&gt;②SpringExtensionFactory.getExtension(type, name)</span><br><span class="line">          --&gt;context.getBean(name)</span><br><span class="line">    --&gt;injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance))<span class="comment">//AOP的简单设计，这个地方如果前面的wrapperClasses缓存不空，那么就会执行这句代码，如Protocol中只有Filter和Listener，通过使用ProtocolFilterWrapper或ProtocolListenerWrapper的构造方法反射然后注入</span></span><br></pre></td></tr></table></figure><p>通过上述分析，总结起来SPI getExtension()的执行流程及设计模式如下：</p><p><img src="/2018/10/02/Dubbo之Spi机制分析/getextension_2.PNG" alt="getextension_2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、Dubbo内核&quot;&gt;&lt;a href=&quot;#一、Dubbo内核&quot; class=&quot;headerlink&quot; title=&quot;一、Dubbo内核&quot;&gt;&lt;/a&gt;一、Dubbo内核&lt;/h3&gt;&lt;p&gt;Dubbo内核主要包含SPI、AOP、IOC、Compiler。&lt;/p&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="Dubbo" scheme="https://hnxydq.github.io/categories/Dubbo/"/>
    
    
      <category term="源码分析" scheme="https://hnxydq.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
